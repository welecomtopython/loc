{
    "t": {
        ".idea": {
            "inspectionProfiles": {
                "files": [
                    {
                        "profiles_settings.xml": {
                            "type": "text",
                            "content": "<component name=\"InspectionProjectProfileManager\">\n  <settings>\n    <option name=\"USE_PROJECT_PROFILE\" value=\"false\" />\n    <version value=\"1.0\" />\n  </settings>\n</component>"
                        }
                    }
                ]
            },
            "files": [
                {
                    ".gitignore": {
                        "type": "text",
                        "content": "# Default ignored files\n/shelf/\n/workspace.xml\n"
                    }
                },
                {
                    "misc.xml": {
                        "type": "text",
                        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.11\" project-jdk-type=\"Python SDK\" />\n</project>"
                    }
                },
                {
                    "modules.xml": {
                        "type": "text",
                        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/progrmming.iml\" filepath=\"$PROJECT_DIR$/.idea/progrmming.iml\" />\n    </modules>\n  </component>\n</project>"
                    }
                },
                {
                    "progrmming.iml": {
                        "type": "text",
                        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<module type=\"PYTHON_MODULE\" version=\"4\">\n  <component name=\"NewModuleRootManager\">\n    <content url=\"file://$MODULE_DIR$\" />\n    <orderEntry type=\"inheritedJdk\" />\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\n  </component>\n  <component name=\"PyDocumentationSettings\">\n    <option name=\"format\" value=\"PLAIN\" />\n    <option name=\"myDocStringFormat\" value=\"Plain\" />\n  </component>\n</module>"
                    }
                },
                {
                    "workspace.xml": {
                        "type": "text",
                        "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"5c65b70e-902f-486d-b992-d7d44df1f930\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Unit Test\" />\n        <option value=\"Python Stub\" />\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2jn7qwP9XxdSj51Orqga8xd52Gm\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;last_opened_file_path&quot;: &quot;D:/App.py/progrmming/configrition/bin/انشا بنيئة الملفات مع تضمين المحتواء&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.fileTypes&quot;\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"D:\\App.py\\progrmming\\configrition\\bin\\انشا بنيئة الملفات مع تضمين المحتواء\" />\n      <recent name=\"D:\\App.py\\progrmming\\configrition\\bin\\_con\\test\" />\n      <recent name=\"D:\\App.py\\progrmming\\configrition\\bin\\انشا بنسئة الملفات بدون تضمين المحتواء\" />\n      <recent name=\"D:\\App.py\\progrmming\\configrition\\bin\\_con\\test\\test\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"D:\\App.py\\progrmming\\app\\set\" />\n      <recent name=\"D:\\App.py\\progrmming\\app\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.اعدت انشا الملفات\">\n    <configuration name=\"إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"progrmming\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/configrition/bin/_con\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/configrition/bin/_con/إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"progrmming\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/configrition/bin/_con\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/configrition/bin/_con/قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"إنشاء بنية المجلدات والملفات في شكل قاموس  (1)\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"progrmming\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/configrition/bin/_con\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/configrition/bin/_con/إنشاء بنية المجلدات والملفات في شكل قاموس .py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"اعدت انشا الملفات\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"progrmming\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/configrition/bin/_con\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/configrition/bin/_con/اعدت انشا الملفات.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"progrmming\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$/configrition/bin/_con\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"D:\\App.py\\progrmming\\configrition\\bin\\_con\\إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.اعدت انشا الملفات\" />\n        <item itemvalue=\"Python.إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات (1)\" />\n        <item itemvalue=\"Python.قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا (1)\" />\n        <item itemvalue=\"Python.إنشاء بنية المجلدات والملفات في شكل قاموس  (1)\" />\n        <item itemvalue=\"Python.إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"5c65b70e-902f-486d-b992-d7d44df1f930\" name=\"Changes\" comment=\"\" />\n      <created>1722011181302</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1722011181302</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$USER_HOME$/AppData/Local/Programs/Python/Python311/Lib/ctypes/__init__.py</url>\n          <line>172</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n  </component>\n</project>"
                    }
                }
            ]
        },
        ".src": {
            "bin": {},
            "hook": {},
            "logging": {
                "bin": {
                    "2024-04-04_app": {},
                    "2024-04-04_صور": {},
                    "برمجة": {}
                }
            },
            "files": [
                {
                    "config.ini": {
                        "type": "text",
                        "content": "[repo]\ncss = ['insex.html']\ndatabis = ['db.c', 'db.pyx', 'geeks2.db', 'hotel_data.db', 'sd.pyd', 'setup.pyx', 'sql.py']\njs = ['config.json', 'library', 'porject', 'Refernsec']\npy = ['config.json', 'library', 'porject', 'Refernsec']\n\n[CWD]\ndir = D:\\Src-2\nitem = ['.idea', '.src', 'app', 'configrition', 'data', 'event', 'Main.py', 'src', 'system-dsin2.ai', 'test_Exe', 'z.py', '__pycache__']\n\n[status]\ndefulte = False\nremote = False\n\n[root]\nrootdir = .\noutdir = /\n\n"
                    }
                },
                {
                    "index.py": {
                        "type": "text",
                        "content": "class dd :..."
                    }
                }
            ]
        },
        "app": {
            "add": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000©fE\u0001\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó \u0000\u0000\u0000\u0000\u0002\u0000G\u0000d\u0000\u0000d\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000d\u0002S\u0000)\u0003c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0014\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002d\u0001\u0000Z\u0003d\u0002S\u0000)\u0003Ú\u0003Addc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó&\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0002S\u0000)\u0003zÊ\n           A class to handle addition of new items to a folder .\n\n           Attributes:\n               args (List[Tuple]): A list of tuples where each tuple represents an item to be added.\n           z\u001aAdd initialized with args:N)\u0001Ú\u0005print)\u0002Ú\u0004selfÚ\u0004argss\u0002\u0000\u0000\u0000  ú(D:\\App.py\\progrmming\\app\\add\\__init__.pyÚ\b__init__z\fAdd.__init__\u0002\u0000\u0000\u0000s\u001b\u0000\u0000\u0000\u0000õ\u000e\u0000\t\u000eÐ\u000e*¨DÑ\b1Ô\b1Ð\b1Ð\b1Ð\b1ó\u0000\u0000\u0000\u0000N)\u0004Ú\b__name__Ú\n__module__Ú\f__qualname__r\t\u0000\u0000\u0000©\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000s#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0002\u0007\u00052ð\u0000\u0007\u00052ð\u0000\u0007\u00052ð\u0000\u0007\u00052ð\u0000\u0007\u00052r\n\u0000\u0000\u0000r\u0003\u0000\u0000\u0000N)\u0001r\u0003\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000ú\b<module>r\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000s7\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0002\b\u00012ð\u0000\b\u00012ð\u0000\b\u00012ð\u0000\b\u00012ð\u0000\b\u00012ñ\u0000\b\u00012ô\u0000\b\u00012ð\u0000\b\u00012ð\u0000\b\u00012ð\u0000\b\u00012r\n\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "_add.pyi": {
                            "type": "text",
                            "content": "\n\nclass Add:...\n\ndef df():...\n"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "class Add:\n    def __init__(self, args):\n        \"\"\"\n           A class to handle addition of new items to a folder .\n\n           Attributes:\n               args (List[Tuple]): A list of tuples where each tuple represents an item to be added.\n           \"\"\"\n        print(\"Add initialized with args:\", args)\n\n\n\n\n"
                        }
                    }
                ]
            },
            "config": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000º©ff\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó \u0000\u0000\u0000\u0000\u0002\u0000G\u0000d\u0000\u0000d\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000d\u0002S\u0000)\u0003c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0014\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002d\u0001\u0000Z\u0003d\u0002S\u0000)\u0003Ú\u0006Configc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó&\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0002Nz\u001dConfig initialized with args:)\u0001Ú\u0005print)\u0002Ú\u0004selfÚ\u0004argss\u0002\u0000\u0000\u0000  ú+D:\\App.py\\progrmming\\app\\config\\__init__.pyÚ\b__init__z\u000fConfig.__init__\u0003\u0000\u0000\u0000s\u0019\u0000\u0000\u0000\u0000Ý\b\nÐ\u000e-¨tÑ\b4Ô\b4Ð\b4Ð\b4Ð\b4ó\u0000\u0000\u0000\u0000N)\u0004Ú\b__name__Ú\n__module__Ú\f__qualname__r\t\u0000\u0000\u0000©\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0003\u0000\u0000\u0000\u0002\u0000\u0000\u0000s#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0002\u0001\u00055ð\u0000\u0001\u00055ð\u0000\u0001\u00055ð\u0000\u0001\u00055ð\u0000\u0001\u00055r\n\u0000\u0000\u0000r\u0003\u0000\u0000\u0000N)\u0001r\u0003\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000ú\b<module>r\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000s7\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0004\u0002\u00015ð\u0000\u0002\u00015ð\u0000\u0002\u00015ð\u0000\u0002\u00015ð\u0000\u0002\u00015ñ\u0000\u0002\u00015ô\u0000\u0002\u00015ð\u0000\u0002\u00015ð\u0000\u0002\u00015ð\u0000\u0002\u00015r\n\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "\nclass Config:\n    def __init__(self, args):\n        print(\"Config initialized with args:\", args)\n"
                        }
                    }
                ]
            },
            "get": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000º©f^\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó \u0000\u0000\u0000\u0000\u0002\u0000G\u0000d\u0000\u0000d\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000d\u0002S\u0000)\u0003c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0014\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002d\u0001\u0000Z\u0003d\u0002S\u0000)\u0003Ú\u0003Getc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó&\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0002Nz\u001aGet initialized with args:)\u0001Ú\u0005print)\u0002Ú\u0004selfÚ\u0004argss\u0002\u0000\u0000\u0000  ú(D:\\App.py\\progrmming\\app\\get\\__init__.pyÚ\b__init__z\fGet.__init__\u0002\u0000\u0000\u0000s\u0019\u0000\u0000\u0000\u0000Ý\b\nÐ\u000e*¨DÑ\b1Ô\b1Ð\b1Ð\b1Ð\b1ó\u0000\u0000\u0000\u0000N)\u0004Ú\b__name__Ú\n__module__Ú\f__qualname__r\t\u0000\u0000\u0000©\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000s#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0002\u0001\u00052ð\u0000\u0001\u00052ð\u0000\u0001\u00052ð\u0000\u0001\u00052ð\u0000\u0001\u00052r\n\u0000\u0000\u0000r\u0003\u0000\u0000\u0000N)\u0001r\u0003\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000ú\b<module>r\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000s7\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0002\u0002\u00012ð\u0000\u0002\u00012ð\u0000\u0002\u00012ð\u0000\u0002\u00012ð\u0000\u0002\u00012ñ\u0000\u0002\u00012ô\u0000\u0002\u00012ð\u0000\u0002\u00012ð\u0000\u0002\u00012ð\u0000\u0002\u00012r\n\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "class Get:\n    def __init__(self, args):\n        print(\"Get initialized with args:\", args)\n"
                        }
                    }
                ]
            },
            "init": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000©f`\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó \u0000\u0000\u0000\u0000\u0002\u0000G\u0000d\u0000\u0000d\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0000d\u0002S\u0000)\u0003c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0014\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002d\u0001\u0000Z\u0003d\u0002S\u0000)\u0003Ú\u0004Initc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó&\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0002Nz\u001bInit initialized with args:)\u0001Ú\u0005print)\u0002Ú\u0004selfÚ\u0004argss\u0002\u0000\u0000\u0000  ú)D:\\App.py\\progrmming\\app\\init\\__init__.pyÚ\b__init__z\nInit.__init__\u0002\u0000\u0000\u0000s\u0019\u0000\u0000\u0000\u0000Ý\b\nÐ\u000e+¨TÑ\b2Ô\b2Ð\b2Ð\b2Ð\b2ó\u0000\u0000\u0000\u0000N)\u0004Ú\b__name__Ú\n__module__Ú\f__qualname__r\t\u0000\u0000\u0000©\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0003\u0000\u0000\u0000\u0001\u0000\u0000\u0000s#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0002\u0001\u00053ð\u0000\u0001\u00053ð\u0000\u0001\u00053ð\u0000\u0001\u00053ð\u0000\u0001\u00053r\n\u0000\u0000\u0000r\u0003\u0000\u0000\u0000N)\u0001r\u0003\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000ú\b<module>r\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000s7\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0002\u0002\u00013ð\u0000\u0002\u00013ð\u0000\u0002\u00013ð\u0000\u0002\u00013ð\u0000\u0002\u00013ñ\u0000\u0002\u00013ô\u0000\u0002\u00013ð\u0000\u0002\u00013ð\u0000\u0002\u00013ð\u0000\u0002\u00013r\n\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "class Init:\n    def __init__(self, args):\n        print(\"Init initialized with args:\", args)\n"
                        }
                    }
                ]
            },
            "set": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000©f\t\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó*\u0001\u0000\u0000\u0000U\u0000d\u0000d\u0001l\u0000m\u0001Z\u0001\u0001\u0000d\u0000d\u0002l\u0002Z\u0002d\u0000d\u0003l\u0003m\u0004Z\u0004\u0001\u0000d\u0000d\u0002l\u0005Z\u0005e\u0002j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\be\te\nd\u0005<\u0000\u0000\u0000d\u0006 \u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\b¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\bd\u0000d\u0002l\u0002Z\u0002d\u0000d\u0002l\u0005Z\u0005e\u0002j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\n¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u000ee\u0005j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u000e¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000G\u0000d\u0007\u0000d\b¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0010d\u0002S\u0000)\té\u0000\u0000\u0000\u0000)\u0001Ú\u0004helpN)\u0001Ú\u000bFileConfingú\u0001~Ú\u0004HOMEz\u000e{}/docs.configc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u001a\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002d\u0001\u0000Z\u0003d\u0002\u0000Z\u0004d\u0003S\u0000)\u0004Ú\u0003Setc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó&\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0002Nz\u001aSet initialized with args:©\u0001Ú\u0005print)\u0002Ú\u0004selfÚ\u0004argss\u0002\u0000\u0000\u0000  ú(D:\\App.py\\progrmming\\app\\set\\__init__.pyÚ\b__init__z\fSet.__init__\u0012\u0000\u0000\u0000s\u0019\u0000\u0000\u0000\u0000Ý\b\nÐ\u000e*¨DÑ\b1Ô\b1Ð\b1Ð\b1Ð\b1ó\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó$\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0002Nz\u0011Set method calledr\n\u0000\u0000\u0000)\u0001r\f\u0000\u0000\u0000s\u0001\u0000\u0000\u0000 r\u000e\u0000\u0000\u0000Ú\u0003setz\u0007Set.set\u0015\u0000\u0000\u0000s\u0017\u0000\u0000\u0000\u0000Ý\b\nÐ\u000e!Ñ\b\"Ô\b\"Ð\b\"Ð\b\"Ð\b\"r\u0010\u0000\u0000\u0000N)\u0005Ú\b__name__Ú\n__module__Ú\f__qualname__r\u000f\u0000\u0000\u0000r\u0012\u0000\u0000\u0000©\u0000r\u0010\u0000\u0000\u0000r\u000e\u0000\u0000\u0000r\b\u0000\u0000\u0000r\b\u0000\u0000\u0000\u0011\u0000\u0000\u0000s2\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0002\u0001\u00052ð\u0000\u0001\u00052ð\u0000\u0001\u00052ð\u0006\u0001\u0005#ð\u0000\u0001\u0005#ð\u0000\u0001\u0005#ð\u0000\u0001\u0005#ð\u0000\u0001\u0005#r\u0010\u0000\u0000\u0000r\b\u0000\u0000\u0000)\u0011Ú\u0005eventr\u0003\u0000\u0000\u0000Ú\u0002osÚ\fevent.configr\u0004\u0000\u0000\u0000Ú\u0003sysÚ\u0004pathÚ\nexpanduserr\u0006\u0000\u0000\u0000r\u0012\u0000\u0000\u0000Ú\u000f__annotations__Ú\u0006formatÚ\u0007dirnameÚ\b__file__Ú\bfile_dirÚ\u0006appendr\b\u0000\u0000\u0000r\u0016\u0000\u0000\u0000r\u0010\u0000\u0000\u0000r\u000e\u0000\u0000\u0000ú\b<module>r#\u0000\u0000\u0000\u0001\u0000\u0000\u0000sÜ\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016à\u0000\t\t\t\tØ\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$à\u0000\n\n\n\nØ\f\u000eG×\f\u001eÒ\f\u001esÑ\f#Ô\f#\u0004cÐ\u0000#Ð\u0000#Ñ\u0000#à\u0005\u0015×\u0005\u001cÒ\u0005\u001cTÑ\u0005\"Ô\u0005\"\u0004à\u0000\t\t\t\tØ\u0000\n\n\n\nà\u000b\n7??8Ñ\u000b$Ô\u000b$\bØ\u0000\u0003\b\u000f\u000f\bÑ\u0000\u0019Ô\u0000\u0019Ð\u0000\u0019ð\u0004\u0005\u0001#ð\u0000\u0005\u0001#ð\u0000\u0005\u0001#ð\u0000\u0005\u0001#ð\u0000\u0005\u0001#ñ\u0000\u0005\u0001#ô\u0000\u0005\u0001#ð\u0000\u0005\u0001#ð\u0000\u0005\u0001#ð\u0000\u0005\u0001#r\u0010\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "new.py": {
                            "type": "text",
                            "content": "import os\n\n__path: str = os.path.abspath(__file__)\n\n__hom: set = os.path.expanduser('~')\n__var: str = __path.split('\\\\')[:-3]\nroot = '\\\\'.join(__var)\n\n__bin = __path.split('\\\\')[:-1]\nroot_bin = '\\\\'.join(__bin)\nprint(os.listdir(str(f'{root}/src/py')))\ndef getname():\n\n    name_prject=str(input(\"Whait is Name Project : \"))\n\n    language_prog=str(input(f\"Whait is language progrming {os.listdir(str(f'{root}/src'))}: \"))\n\n    if not language_prog in os.listdir(str(f'{root}/src')):\n        print(f\"{language_prog} in not in {os.listdir(str(f'{root}/src'))}\")\n        getname()\n\n    any_type=str(input(f\"Whait is any type or inside folder {os.listdir(str(f'{root}/src/{language_prog}'))} : \"))\n\n    return {'name_prject':name_prject,'language_prog':language_prog,'any_type':any_type}\n\n\ndef New():...\n\n\n# print(getname())"
                        }
                    },
                    {
                        "set.py": {
                            "type": "text",
                            "content": "from event import help\nfrom eventeeeeeeeeeeeeeee import hel\n\nimport os\nfrom event.config import FileConfing\n\nimport sys\nHOME: set = os.path.expanduser('~')\n\nHOME=\"{}/docs.config\".format(HOME)\n\nimport os\nimport sys\n\nfile_dir = os.path.dirname(__file__)\nsys.path.append(file_dir)\n\nclass Set:\n    def __init__(self, args:str):\n        print(args)\n        \"\"\"\n        src add <nema> <nema src>\n\n        \"\"\"\n\n\n\n        if not  args:\n\n            print(help.set())\n            print('-'*50)\n            print('exit cod 0')\n            sys.exit(0)\n        if len(args) == 1:\n            if args[0]=='new' or '-n':\n                print('new'*50)\n                print(args[0])\n                N=self.getname()\n                FileConfing(name=N['name_prject'],main=N['language_prog'],path=f\"{HOME}/docs.config/{N['language_prog']}\")\n\n            else:\n                pass\n\n\n\n\n\n\n\n\n\n\n    def getname(self):\n\n        name_prject = str(input(\"Whait is Name Project : \"))\n\n        language_prog = str(input(f\"Whait is language progrming {os.listdir(str(f'{HOME}/src'))}: \"))\n\n        if not language_prog in os.listdir(str(f'{HOME}/src')):\n            print(\" nem folder not fonund\")\n            print(f\"{language_prog}  not in found in  {os.listdir(str(f'{HOME}/src'))}\")\n            self.getname()\n            print('reucurtio lin 51')\n\n        elif language_prog in os.listdir(str(f'{HOME}/src/{language_prog}')):\n            print('language_prog  lin 54')\n            any_type = str(input(f\"Whait is any type or inside folder {os.listdir(str(f'{HOME}/src/{language_prog}'))} : \"))\n            if not  any_type in os.listdir(str(f'{HOME}/src/{language_prog}')):\n                os.system(f'cd /d {HOME}/src/{language_prog} && mkdir {any_type}')\n        else:\n            any_type = str(input(f\"Whait is Newo type or inside folder {os.listdir(str(f'{HOME}/src/{language_prog}'))} : \"))\n            if not any_type in os.listdir(str(f'{HOME}/src/{language_prog}')):\n                os.system(f'cd /d {HOME}/src/{language_prog} && mkdir {any_type}')\n\n        print( {'name_prject': name_prject, 'language_prog': language_prog, 'any_type': any_type})\n        return  {'name_prject': name_prject, 'language_prog': language_prog, 'any_type': any_type}\n"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "from event import help\n\nimport os\nfrom event.config import FileConfing\n\nimport sys\nHOME: set = os.path.expanduser('~')\n\nHOME=\"{}/docs.config\".format(HOME)\n\nimport os\nimport sys\n\nfile_dir = os.path.dirname(__file__)\nsys.path.append(file_dir)\n\nclass Set:\n    def __init__(self, args):\n        print(\"Set initialized with args:\", args)\n\n    def set(self):\n        print(\"Set method called\")\n\n\n    #\n    #     if not  args:\n    #\n    #         print(help.set())\n    #         print('-'*50)\n    #         print('exit cod 0')\n    #         sys.exit(0)\n    #     if len(args) == 1:\n    #         if args[0]=='new' or '-n':\n    #             print('new'*50)\n    #             print(args[0])\n    #             N=self.getname()\n    #             FileConfing(name=N['name_prject'],main=N['language_prog'],path=f\"{HOME}/docs.config/{N['language_prog']}\")\n    #\n    #         else:\n    #             pass\n    #\n    #~\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    # def getname(self):\n    #\n    #     name_prject = str(input(\"Whait is Name Project : \"))\n    #\n    #     language_prog = str(input(f\"Whait is language progrming {os.listdir(str(f'{HOME}/src'))}: \"))\n    #\n    #     if not language_prog in os.listdir(str(f'{HOME}/src')):\n    #         print(\" nem folder not fonund\")\n    #         print(f\"{language_prog}  not in found in  {os.listdir(str(f'{HOME}/src'))}\")\n    #         self.getname()\n    #         print('reucurtio lin 51')\n    #\n    #     elif language_prog in os.listdir(str(f'{HOME}/src/{language_prog}')):\n    #         print('language_prog  lin 54')\n    #         any_type = str(input(f\"Whait is any type or inside folder {os.listdir(str(f'{HOME}/src/{language_prog}'))} : \"))\n    #         if not  any_type in os.listdir(str(f'{HOME}/src/{language_prog}')):\n    #             os.system(f'cd /d {HOME}/src/{language_prog} && mkdir {any_type}')\n    #     else:\n    #         any_type = str(input(f\"Whait is Newo type or inside folder {os.listdir(str(f'{HOME}/src/{language_prog}'))} : \"))\n    #         if not any_type in os.listdir(str(f'{HOME}/src/{language_prog}')):\n    #             os.system(f'cd /d {HOME}/src/{language_prog} && mkdir {any_type}')\n    #\n    #     print( {'name_prject': name_prject, 'language_prog': language_prog, 'any_type': any_type})\n    #     return  {'name_prject': name_prject, 'language_prog': language_prog, 'any_type': any_type}\n"
                        }
                    }
                ]
            },
            "__pycache__": {
                "files": [
                    {
                        "index.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000ç©fu\u0002\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\\\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000m\u0001Z\u0001m\u0002Z\u0002m\u0003Z\u0003m\u0004Z\u0004m\u0005Z\u0005\u0001\u0000\u0002\u0000G\u0000d\u0002\u0000d\u0003e\u0001e\u0002e\u0003e\u0004e\u0005¦\u0007\u0000\u0000«\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0006\u0002\u0000e\u0006d\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0007d\u0005S\u0000)\u0006é\u0000\u0000\u0000\u0000)\u0005Ú\u0003AddÚ\u0006ConfigÚ\u0003GetÚ\u0004InitÚ\u0003Setc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0014\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002d\u0001\u0000Z\u0003d\u0002S\u0000)\u0003Ú\u0003Appc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000d\u0001}\u0002t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0000]'}\u0003|\u0003j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001k\u0002\u0000\u0000\u0000\u0000r\u001a|\u0003 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0002}\u0002\u0001\u0000n\u0001(|\u0002s\u0014t\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003|\u0001\u0000\u0002¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000d\u0000S\u0000)\u0004NFTz\"No matching class found for args: )\u0005r\t\u0000\u0000\u0000Ú\u0007__mro__Ú\b__name__Ú\b__init__Ú\u0005print)\u0004Ú\u0004selfÚ\u0004argsÚ\u0007matchedÚ\u0003clss\u0004\u0000\u0000\u0000    ú!D:\\App.py\\progrmming\\app\\index.pyr\n\u0000\u0000\u0000z\fApp.__init__\u000b\u0000\u0000\u0000sy\u0000\u0000\u0000\u0000Ø\u0012\u0017\u0007Ý\u0013\u0016;ð\u0000\u0004\t\u0016ð\u0000\u0004\t\u0016CØ\u000f\u0012|tÒ\u000f#Ð\u000f#Ø\u0010\u0013\f\fT 4Ñ\u0010(Ô\u0010(Ð\u0010(Ø\u001a\u001e\u0007Ø\u0010\u0015\u0005ð\u0007\u0000\u0010$ð\b\u0000\u0010\u0017ð\u0000\u0001\t?Ý\f\u0011Ð\u0012=°tÐ\u0012=Ð\u0012=Ñ\f>Ô\f>Ð\f>Ð\f>Ð\f>ð\u0003\u0001\t?ð\u0000\u0001\t?ó\u0000\u0000\u0000\u0000N)\u0004r\f\u0000\u0000\u0000Ú\n__module__Ú\f__qualname__r\n\u0000\u0000\u0000©\u0000r\u0014\u0000\u0000\u0000r\u0013\u0000\u0000\u0000r\t\u0000\u0000\u0000r\t\u0000\u0000\u0000\n\u0000\u0000\u0000s#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ð\u0002\b\u0005?ð\u0000\b\u0005?ð\u0000\b\u0005?ð\u0000\b\u0005?ð\u0000\b\u0005?r\u0014\u0000\u0000\u0000r\t\u0000\u0000\u0000r\u0007\u0000\u0000\u0000N)\bÚ\u0003appr\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000r\u0005\u0000\u0000\u0000r\u0006\u0000\u0000\u0000r\u0007\u0000\u0000\u0000r\t\u0000\u0000\u0000Ú\fapp_instancer\u0017\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0013\u0000\u0000\u0000ú\b<module>r\u001a\u0000\u0000\u0000\u0001\u0000\u0000\u0000sv\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0012\u0000\u0001*Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)Ð\u0000)ð\u0002\t\u0001?ð\u0000\t\u0001?ð\u0000\t\u0001?ð\u0000\t\u0001?ð\u0000\t\u0001?#fS\u0014cñ\u0000\t\u0001?ô\u0000\t\u0001?ð\u0000\t\u0001?ð\u001c\u0000\u0010\u0013s5zz\f\f\fr\u0014\u0000\u0000\u0000"
                        }
                    },
                    {
                        "__init__.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000È©fÏ\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000óB\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000m\u0001Z\u0001\u0001\u0000d\u0000d\u0002l\u0002m\u0003Z\u0003\u0001\u0000d\u0000d\u0003l\u0004m\u0005Z\u0005\u0001\u0000d\u0000d\u0004l\u0006T\u0000d\u0000d\u0004l\u0007T\u0000g\u0000d\u0005¢\u0001Z\bd\u0006S\u0000)\u0007é\u0000\u0000\u0000\u0000)\u0001Ú\u0003Add)\u0001Ú\u0006Config)\u0001Ú\u0003Get)\u0001Ú\u0001*)\u0005r\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000r\u0005\u0000\u0000\u0000Ú\u0004InitÚ\u0003SetN)\tÚ\u0007app.addr\u0003\u0000\u0000\u0000Ú\napp.configr\u0004\u0000\u0000\u0000Ú\u0007app.getr\u0005\u0000\u0000\u0000Ú\bapp.initÚ\u0007app.setÚ\u0007__all__©\u0000ó\u0000\u0000\u0000\u0000ú$D:\\App.py\\progrmming\\app\\__init__.pyú\b<module>r\u0012\u0000\u0000\u0000\u0001\u0000\u0000\u0000sh\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001à\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ø\u0000\u001dÐ\u0000\u001dÐ\u0000\u001dÐ\u0000\u001dÐ\u0000\u001dÐ\u0000\u001dØ\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ð\u0000\u0017Ø\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ø\u0000\u0015Ð\u0000\u0015Ð\u0000\u0015Ð\u0000\u0015ð\u0004\u0006\t\u0002ð\u0000\u0006\t\u0002ð\u0000\u0006\t\u0002\u0007\u0007\u0007r\u0010\u0000\u0000\u0000"
                        }
                    }
                ]
            },
            "files": [
                {
                    "index.py": {
                        "type": "text",
                        "content": "\n# from add import Add\n# from config import Config\n# from get import Get\n# from init import Init\n# from set import Set\n# from typing import Any\n\nfrom app import (Add,Config,Get,Init,Set)\nclass App(Add,Config,Get,Init,Set):\n    def __init__(self, args):\n        matched = False\n        for cls in App.__mro__:  # Skip the App class itself\n            if cls.__name__ == args:\n                cls.__init__(self, args)\n                matched = True\n                break\n        if not matched:\n            print(f\"No matching class found for args: {args}\")\n\n    # Example usage\n\n\napp_instance = App(\"Set\")\n"
                    }
                },
                {
                    "__init__": {
                        "type": "text",
                        "content": ""
                    }
                },
                {
                    "__init__.py": {
                        "type": "text",
                        "content": "\nfrom app.add import Add\nfrom app.config import Config\nfrom app.get import Get\nfrom app.init import *\nfrom app.set import *\n\n__all__=[\n    'Add',\n    'Config',\n    'Get',\n    'Init',\n    \"Set\"\n]"
                    }
                },
                {
                    "__init__.pyi": {
                        "type": "text",
                        "content": "from typing import List, Any, Tuple\n\n\nclass Add:\n    \"\"\"\n    A class to handle addition of new items to a folder.\n\n    Attributes:\n        args (List[Tuple]): A list of tuples where each tuple represents an item to be added.\n    \"\"\"\n\n    def __init__(self, args: List[Tuple]) -> None:\n        \"\"\"\n        Initializes the Add class with a list of items.\n\n        Args:\n            args (List[Tuple]): A list of tuples where each tuple represents an item to be added.\n        \"\"\"\n        ...\n\n\nclass Config:\n    \"\"\"\n    A class to handle configuration settings.\n\n    Attributes:\n        args (List[Tuple]): A list of tuples used for configuration.\n    \"\"\"\n\n    def __init__(self, args: List[Tuple]) -> List[Any]:\n        \"\"\"\n        Initializes the Config class with configuration settings.\n\n        Args:\n            args (List[Tuple]): A list of tuples used for configuration.\n\n        Returns:\n            List[Any]: Configuration settings as a list.\n        \"\"\"\n        ...\n\n\nclass Get:\n    \"\"\"\n    A class to retrieve data.\n\n    Attributes:\n        args (List[Tuple]): A list of tuples representing the data to be retrieved.\n    \"\"\"\n\n    def __init__(self, args: List[Tuple]) -> List[Any]:\n        \"\"\"\n        Initializes the Get class with data retrieval settings.\n\n        Args:\n            args (List[Tuple]): A list of tuples representing the data to be retrieved.\n\n        Returns:\n            List[Any]: Retrieved data as a list.\n        \"\"\"\n        ...\n\n\nclass Init:\n    \"\"\"\n    A class to handle initialization settings.\n\n    Attributes:\n        args (List[Tuple]): A list of tuples used for initialization.\n    \"\"\"\n\n    def __init__(self, args: List[Tuple]) -> List[Any]:\n        \"\"\"\n        Initializes the Init class with initialization settings.\n\n        Args:\n            args (List[Tuple]): A list of tuples used for initialization.\n\n        Returns:\n            List[Any]: Initialization settings as a list.\n        \"\"\"\n        ...\n\n\nclass Set:\n    \"\"\"\n    A class to handle configuration settings.\n\n    Attributes:\n        args (List[Tuple]): A list of tuples used to set configuration.\n    \"\"\"\n\n    def __init__(self, args: List[Tuple]) -> None:\n        \"\"\"\n        Initializes the Set class with configuration settings.\n\n        Args:\n            args (List[Tuple]): A list of tuples used to set configuration.\n        \"\"\"\n        ...\n\n\nclass App:\n    \"\"\"\n    A class to manage the application.\n\n    Attributes:\n        args (str): A string representing the application settings or mode.\n    \"\"\"\n\n    def __init__(self, args: str) -> None:\n        \"\"\"\n        Initializes the App class with application settings or mode.\n\n        Args:\n            args (str): A string representing the application settings or mode.\n        \"\"\"\n        ...\n"
                    }
                }
            ]
        },
        "configrition": {
            "bin": {
                "_con": {
                    "t": {
                        "__pycache__": {}
                    },
                    "files": [
                        {
                            "directory_structure_file_is_empty.json": {
                                "type": "text",
                                "content": "{\n    \"t\": {\n        \"__pycache__\": {}\n    },\n    \"files\": [\n        \"Preparation.py\",\n        \"إنشاء بنية المجلدات والملفات في شكل قاموس .py\",\n        \"إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات.py\",\n        \"اعدت انشا الملفات.py\",\n        \"قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا.py\"\n    ]\n}"
                            }
                        },
                        {
                            "Preparation.py": {
                                "type": "text",
                                "content": ""
                            }
                        },
                        {
                            "إنشاء بنية المجلدات والملفات في شكل قاموس .py": {
                                "type": "text",
                                "content": "import os\nimport json\n\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات\n        if filenames:\n            current_level['files'] = filenames\n\n    return directory_structure\n\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure_file_is_empty.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\n"
                            }
                        },
                        {
                            "إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات.py": {
                                "type": "text",
                                "content": "import os\nimport json\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس، مع تضمين محتوى كل ملف.\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات مع محتواها\n        if filenames:\n            files_info = []\n            for filename in filenames:\n                file_path = os.path.join(dirpath, filename)\n                file_content = \"\"\n                try:\n                    # محاولة قراءة الملف باستخدام ترميز UTF-8\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        file_content = file.read()\n                except UnicodeDecodeError:\n                    # في حال فشل القراءة، محاولة استخدام ترميز آخر\n                    try:\n                        with open(file_path, 'r', encoding='latin-1') as file:\n                            file_content = file.read()\n                    except Exception as e:\n                        file_content = f\"Error reading file: {e}\"\n\n                files_info.append({filename: file_content})\n            current_level['files'] = files_info\n\n    return directory_structure\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\nprint(f\"تم حفظ بنية المجلدات والملفات في {output_file}\")\n"
                            }
                        },
                        {
                            "اعدت انشا الملفات.py": {
                                "type": "text",
                                "content": "import os\nimport json\n\ndef create_structure_from_json(json_file, rootdir):\n    \"\"\"\n    قراءة بنية المجلدات والملفات من ملف JSON وإنشاؤها في نظام الملفات، وكتابة المحتوى المحدد في الملفات.\n    \"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        structure = json.load(f)\n\n    def create_items(base_path, items):\n        for name, content in items.items():\n            if name == 'files':\n                # معالجة الملفات\n                for file_info in content:\n                    if isinstance(file_info, dict):\n                        for filename, file_content in file_info.items():\n                            file_path = os.path.join(base_path, filename)\n                            os.makedirs(os.path.dirname(file_path), exist_ok=True)\n                            with open(file_path, 'w', encoding='utf-8') as file:\n                                file.write(file_content)  # كتابة النص المحدد في JSON داخل الملف\n            else:\n                # معالجة المجلدات\n                folder_path = os.path.join(base_path, name)\n                os.makedirs(folder_path, exist_ok=True)\n                create_items(folder_path, content)\n\n    create_items(rootdir, structure)\n\n# تحديد مسار ملف JSON\njson_file = 'directory_structure.json'\n# تحديد مسار المجلد الجذري حيث سيتم إنشاء البنية\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con\\t'  # استبدل هذا المسار بمسار المجلد الجذري لديك\n\n# إنشاء المجلدات والملفات من ملف JSON وكتابة المحتوى\ncreate_structure_from_json(json_file, root_directory)\n\nprint(f\"تم إنشاء بنية المجلدات والملفات في {root_directory} وكتابة المحتوى المحدد.\")\n"
                            }
                        },
                        {
                            "قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا.py": {
                                "type": "text",
                                "content": "import os\nimport json\n\n\ndef create_structure_from_json(json_file, rootdir):\n    \"\"\"\n    قراءة بنية المجلدات والملفات من ملف JSON وإنشاؤها في نظام الملفات\n    \"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        structure = json.load(f)\n\n    def create_items(base_path, items):\n        for name, content in items.items():\n            if name == 'files':\n                for filename in content:\n                    file_path = os.path.join(base_path, filename)\n                    open(file_path, 'w').close()\n            else:\n                folder_path = os.path.join(base_path, name)\n                os.makedirs(folder_path, exist_ok=True)\n                create_items(folder_path, content)\n\n    create_items(rootdir, structure)\n\n\n# تحديد مسار ملف JSON\njson_file = 'directory_structure_file_is_empty.json'\n\n# تحديد مسار المجلد الجذري حيث سيتم إنشاء البنية\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con\\test'  # استبدل هذا المسار بمسار المجلد الجذري لديك\n\n# إنشاء بنية المجلدات والملفات من ملف JSON\ncreate_structure_from_json(json_file, root_directory)\n\nprint(f\"تم إنشاء بنية المجلدات والملفات في {root_directory}\")\n"
                            }
                        }
                    ]
                },
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000\u0016f\u000ffD\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0018\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000m\u0001Z\u0002\u0001\u0000d\u0002g\u0001Z\u0003d\u0003S\u0000)\u0004é\u0001\u0000\u0000\u0000)\u0001Ú\n__config__Ú\u0005_confN)\u0004Ú\u0000r\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000Ú\u0007__all__©\u0000ó\u0000\u0000\u0000\u0000ú0D:\\Src-2\\progrmming\\configrition\\bin\\__init__.pyú\b<module>r\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000s'\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001à\u0000!Ð\u0000!Ð\u0000!Ð\u0000!Ð\u0000!Ð\u0000!ð\u0006\u0000\u0005\fð\u0003\u0002\t\u0002\u0007\u0007\u0007r\b\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "انشا بنسئة الملفات بدون تضمين المحتواء": {
                    "files": [
                        {
                            "إنشاء بنية المجلدات والملفات في شكل قاموس .py": {
                                "type": "text",
                                "content": "import os\nimport json\n\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات\n        if filenames:\n            current_level['files'] = filenames\n\n    return directory_structure\n\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure_file_is_empty.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\n"
                            }
                        },
                        {
                            "قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا.py": {
                                "type": "text",
                                "content": "import os\nimport json\n\n\ndef create_structure_from_json(json_file, rootdir):\n    \"\"\"\n    قراءة بنية المجلدات والملفات من ملف JSON وإنشاؤها في نظام الملفات\n    \"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        structure = json.load(f)\n\n    def create_items(base_path, items):\n        for name, content in items.items():\n            if name == 'files':\n                for filename in content:\n                    file_path = os.path.join(base_path, filename)\n                    open(file_path, 'w').close()\n            else:\n                folder_path = os.path.join(base_path, name)\n                os.makedirs(folder_path, exist_ok=True)\n                create_items(folder_path, content)\n\n    create_items(rootdir, structure)\n\n\n# تحديد مسار ملف JSON\njson_file = 'directory_structure_file_is_empty.json'\n\n# تحديد مسار المجلد الجذري حيث سيتم إنشاء البنية\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con\\test'  # استبدل هذا المسار بمسار المجلد الجذري لديك\n\n# إنشاء بنية المجلدات والملفات من ملف JSON\ncreate_structure_from_json(json_file, root_directory)\n\nprint(f\"تم إنشاء بنية المجلدات والملفات في {root_directory}\")\n"
                            }
                        }
                    ]
                },
                "انشا بنيئة الملفات مع تضمين المحتواء": {
                    "files": [
                        {
                            "إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات.py": {
                                "type": "text",
                                "content": "import os\nimport json\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس، مع تضمين محتوى كل ملف.\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات مع محتواها\n        if filenames:\n            files_info = []\n            for filename in filenames:\n                file_path = os.path.join(dirpath, filename)\n                file_content = \"\"\n                try:\n                    # محاولة قراءة الملف باستخدام ترميز UTF-8\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        file_content = file.read()\n                except UnicodeDecodeError:\n                    # في حال فشل القراءة، محاولة استخدام ترميز آخر\n                    try:\n                        with open(file_path, 'r', encoding='latin-1') as file:\n                            file_content = file.read()\n                    except Exception as e:\n                        file_content = f\"Error reading file: {e}\"\n\n                files_info.append({filename: file_content})\n            current_level['files'] = files_info\n\n    return directory_structure\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\nprint(f\"تم حفظ بنية المجلدات والملفات في {output_file}\")\n"
                            }
                        },
                        {
                            "اعدت انشا الملفات.py": {
                                "type": "text",
                                "content": "import os\nimport json\n\ndef create_structure_from_json(json_file, rootdir):\n    \"\"\"\n    قراءة بنية المجلدات والملفات من ملف JSON وإنشاؤها في نظام الملفات، وكتابة المحتوى المحدد في الملفات.\n    \"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        structure = json.load(f)\n\n    def create_items(base_path, items):\n        for name, content in items.items():\n            if name == 'files':\n                # معالجة الملفات\n                for file_info in content:\n                    if isinstance(file_info, dict):\n                        for filename, file_content in file_info.items():\n                            file_path = os.path.join(base_path, filename)\n                            os.makedirs(os.path.dirname(file_path), exist_ok=True)\n                            with open(file_path, 'w', encoding='utf-8') as file:\n                                file.write(file_content)  # كتابة النص المحدد في JSON داخل الملف\n            else:\n                # معالجة المجلدات\n                folder_path = os.path.join(base_path, name)\n                os.makedirs(folder_path, exist_ok=True)\n                create_items(folder_path, content)\n\n    create_items(rootdir, structure)\n\n# تحديد مسار ملف JSON\njson_file = 'directory_structure.json'\n# تحديد مسار المجلد الجذري حيث سيتم إنشاء البنية\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con\\test'  # استبدل هذا المسار بمسار المجلد الجذري لديك\n\n# إنشاء المجلدات والملفات من ملف JSON وكتابة المحتوى\ncreate_structure_from_json(json_file, root_directory)\n\nprint(f\"تم إنشاء بنية المجلدات والملفات في {root_directory} وكتابة المحتوى المحدد.\")\n"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "area": {
                            "type": "text",
                            "content": "D:\\Src\\src\\DirConfigrion.json\nD:\\Src\\src\\js\nD:\\Src\\src\\py\nD:\\Src\\src\\js\\config.json\nD:\\Src\\src\\js\\library\nD:\\Src\\src\\js\\porject\nD:\\Src\\src\\js\\Refernsec\nD:\\Src\\src\\js\\library\\config.json\nD:\\Src\\src\\js\\library\\npm\nD:\\Src\\src\\js\\library\\npm.rar\nD:\\Src\\src\\js\\library\\React-Nitve\nD:\\Src\\src\\js\\library\\React-Nitve\\devlop-app\nD:\\Src\\src\\py\\config.json\nD:\\Src\\src\\py\\library\nD:\\Src\\src\\py\\porject\nD:\\Src\\src\\py\\Refernsec\n"
                        }
                    },
                    {
                        "codnfig.ini": {
                            "type": "text",
                            "content": "[Settings]\n"
                        }
                    },
                    {
                        "config.ini": {
                            "type": "text",
                            "content": "[Settings]\npath = /mnt/d/App.py/progrmming/configrition/bin\n"
                        }
                    },
                    {
                        "config.json": {
                            "type": "text",
                            "content": ""
                        }
                    },
                    {
                        "dir_info": {
                            "type": "text",
                            "content": "cd /d .src & mkdir bin & mkdir hook"
                        }
                    },
                    {
                        "script.sh": {
                            "type": "text",
                            "content": "# !/bin/bash\n\n# تحديد اسم ملف الـ .ini\nini_file=\"cssonfig.ini\"\n\n# الحصول على المسار الحالي للملف\nfile_path=$(pwd)\n\n# إنشاء ملف الـ .ini وكتابة المسار فيه\necho \"[Settings]\" > $ini_file\necho \"path = $file_path\" >> $ini_file\n\n# تأكيد إنشاء الملف بنجاح\necho \"تم إنشاء الملف $ini_file بنجاح.\"\n"
                        }
                    },
                    {
                        "_config.py": {
                            "type": "text",
                            "content": "import configparser\nimport os\nimport ctypes\nfrom threading import Thread\nimport time\nimport datetime\nimport numpy as np\nfrom configrition.Path_x import Path\n#\nprint(Path.HOM.value)\nprint(Path.root.value)\n\n\nclass Config:\n\n    def __init__(self):\n\n        self.root=Path.root.value\n\n\n        \"\"\"map config >>\n        1 add dir src\n        2 add crent work dirctory\n        [repo]\n\n        js = ['config.json', 'library', 'porject', 'Refernsec']\n        py = ['config.json', 'library', 'porject', 'Refernsec']\n\n        [CWD]\n        dir = D:\\Src\\bin\n\n        [status]\n        defult=falsa\n\n        \"\"\"\n        pass\n    def criet_config(self,**kwargs):\n        \"\"\" 1read file global and get self.PATH Src \"\"\"\n        configFilePath =f'{self.root}/global_config.ini'\n        r_config = configparser.ConfigParser()\n\n        r_config.read(configFilePath)\n\n        PATH =self.root\n        print(n for n in os.listdir(f'{PATH}\\src'))\n        \"\"\" 2cobdtin loop in src add ary is dir\"\"\"\n        globa=[n for n in os.listdir(f'{PATH}\\src') if os.path.isdir(f'{PATH}\\src\\{n}')]\n\n\n        w_config = configparser.ConfigParser()\n        my_dict = {}\n        for name in globa :\n            my_dict[name] = os.listdir(f'{PATH}/src/{name}') # Add key-val\n\n\n        w_config['repo']=my_dict\n        w_config['CWD']={\n            \"dir\":os.getcwd(),\n            \"item\":os.listdir(os.getcwd())\n        }\n        w_config['status']={\n        \"defulte\": False,\n        \"remote\":False,\n\n        }\n        w_config['root']={\n            \"rootdir\":'.',\n            'outdir':\"/\"\n\n        }\n\n\n        with open('.src/config.ini', 'w') as configfile:\n          w_config.write(configfile)\n    def add_bin(self,):\n\n        \"\"\" 1read file global and get self.PATH Src \"\"\"\n        configFilePath = r'../global_config.ini'\n        r_config = configparser.ConfigParser()\n\n        r_config.read(configFilePath)\n\n        PATH=self.root\n\n        def check_prep(path):\n            if not os.path.exists(path):\n                os.makedirs(path)\n                FILE_ATTRIBUTE_HIDDEN = 0x02\n                ret = ctypes.windll.kernel32.SetFileAttributesW(path, FILE_ATTRIBUTE_HIDDEN)\n        check_prep('.src')\n        with open(f'{PATH}\\data\\dir_info','r')as f :\n            C=f.read()\n\n            os.system(C)\n\n\n\n    def run(self):\n        self.add_bin()\n        self.criet_config()\n\n\n# Config().run()\n\n"
                        }
                    },
                    {
                        "_config.spec": {
                            "type": "text",
                            "content": "# -*- mode: python ; coding: utf-8 -*-\n\n\nblock_cipher = None\n\n\na = Analysis(\n    ['_config.py'],\n    pathex=[],\n    binaries=[],\n    datas=[],\n    hiddenimports=[],\n    hookspath=[],\n    hooksconfig={},\n    runtime_hooks=[],\n    excludes=[],\n    win_no_prefer_redirects=False,\n    win_private_assemblies=False,\n    cipher=block_cipher,\n    noarchive=False,\n)\npyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)\n\nexe = EXE(\n    pyz,\n    a.scripts,\n    a.binaries,\n    a.zipfiles,\n    a.datas,\n    [],\n    name='_config',\n    debug=False,\n    bootloader_ignore_signals=False,\n    strip=False,\n    upx=True,\n    upx_exclude=[],\n    runtime_tmpdir=None,\n    console=True,\n    disable_windowed_traceback=False,\n    argv_emulation=False,\n    target_arch=None,\n    codesign_identity=None,\n    entitlements_file=None,\n)\n"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "\nfrom . import _config as _conf\n\n__all__=[\n    '_conf'\n]\n\n"
                        }
                    }
                ]
            },
            "json_config": {
                "__pycache__": {
                    "files": [
                        {
                            "CVJson.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000\u000eç£fB\u000e\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó`\u0001\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0000d\u0000d\u0001l\u0001Z\u0001d\u0000d\u0001l\u0002Z\u0002d\u0000d\u0001l\u0003Z\u0003d\u0000d\u0001l\u0004Z\u0005d\u0000d\u0001l\u0006Z\u0006d\u0000d\u0002l\u0006m\u0007Z\u0007m\bZ\bm\tZ\t\u0001\u0000d\u0000d\u0003l\nm\u000bZ\u000b\u0001\u0000e\u0001j\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u000e¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u000fe\u000f \u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0005\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0011d\u0006Z\u0012\u0002\u0000e\u0013e\u0012¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000e\u0001j\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0015e\u0015 \u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0007\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0016\u0002\u0000G\u0000d\b\u0000d\t¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0017\u0002\u0000e\u0017¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0001S\u0000)\né\u0000\u0000\u0000\u0000N)\u0003Ú\u0004ForeÚ\u0004BackÚ\u0005Style)\u0001Ú\u0012find_max_extensionú\u0001\\éýÿÿÿz\fE:\\LOc\\User\\éÿÿÿÿc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000óJ\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002e\u0003d\u0001d\u0001d\u0001d\u0001d\u0002d\u0001d\u0001d\u0003d\u0002d\u0002f\u000bd\u0004\u0001Z\u0004d\u0005\u0000Z\u0005d\u0006\u0000Z\u0006d\u0007\u0000Z\u0007d\b\u0000Z\bd\t\u0000Z\td\u0002S\u0000)\nÚ\fCVFileConfigÚ\u0000Nz\u00051.0.0c\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó°\u0001\u0000\u0000\u0000|\u0006\u0002g\u0000}\u0006|\n\u001et\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\n|\u000b\u0014t\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u000b|\u0001|\u0000_\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002|\u0000_\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0003|\u0000_\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004|\u0000_\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0005|\u0000_\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000_\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007|\u0000_\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\b|\u0000_\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\t|\u0000_\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\n|\u0000_\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u000b|\u0000_\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000 \u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0000 \u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0000 \u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0003NÚ\textensionÚ\u0005files)\u0012Ú\bdatetimeÚ\u0004dateÚ\u0005todayr\u0006\u0000\u0000\u0000Ú\u0004nameÚ\u0004typeÚ\blanguageÚ\u0005startÚ\u0004pathÚ\u0006insideÚ\u000bdescriptionÚ\u0004mainÚ\u0007versionÚ\torderdateÚ\u000bmaxextefileÚ\tis_existsÚ\u0013create_package_jsonÚ\nlogging_setup)\fÚ\u0004selfr\u0013\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000r\u0016\u0000\u0000\u0000r\u0017\u0000\u0000\u0000r\u0018\u0000\u0000\u0000r\u0019\u0000\u0000\u0000r\u001a\u0000\u0000\u0000r\u001b\u0000\u0000\u0000r\u001c\u0000\u0000\u0000r\u000e\u0000\u0000\u0000s\f\u0000\u0000\u0000            ú7D:\\App.py\\progrmming\\configrition\\json_config\\CVJson.pyÚ\b__init__z\u0015CVFileConfig.__init__\u0016\u0000\u0000\u0000sÑ\u0000\u0000\u0000\u0000à\u000b\u0011>Ø\u0015\u0017FØ\u000b\u0014Ð\u000b\u001cÝ\u0018 \n×\u0018+Ò\u0018+Ñ\u0018-Ô\u0018-IØ\u000b\u0014Ð\u000b\u001cÝ\u0018*Ñ\u0018,Ô\u0018,¨[Ô\u00189Ið\u0006\u0000\u0015\u0019\u0004\tØ\u0014\u0018\u0004\tØ\u0018 \u0004\nØ\u0015\u001a\u0004\nØ\u0014\u0018\u0004\tÝ\u0016(Ñ\u0016*Ô\u0016*¨7Ô\u00163\u0004\u000bØ\u001b&\u0004Ô\b\u0018Ø\u0014\u0018\u0004\tØ\u0017\u001e\u0004\fØ\u0019\"\u0004\u000eØ\u0019\"\u0004Ô\b\u0018à\b\f\u000e\u000eÑ\b\u0018Ô\b\u0018Ð\b\u0018Ø\b\f×\b Ò\b Ñ\b\"Ô\b\"Ð\b\"Ø\b\f×\b\u001aÒ\b\u001aÑ\b\u001cÔ\b\u001cÐ\b\u001cÐ\b\u001cÐ\b\u001có\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\f\u0001\u0000\u0000\u0000|\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0001t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000}\u0002t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001|\u0002d\u0003¬\u0004¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000d\u0000d\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000n\u000b#\u00001\u0000s\u0004w\u0002x\u0003Y\u0000w\u0001\u0001\u0000Y\u0000\u0001\u0000\u0001\u0000t\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0006z\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0007Nú\u0011Docs.package.jsonÚ\u0001wé\u0002\u0000\u0000\u0000)\u0001Ú\u0006indentz\u0016type Docs.package.jsonz#has been created  Docs.package.json)\tÚ\u0004fileÚ\u0004openÚ\u0004jsonÚ\u0004dumpÚ\u0002osÚ\u0006systemÚ\u0005printr\u0003\u0000\u0000\u0000Ú\u0005GREEN)\u0003r!\u0000\u0000\u0000Ú\u0004dataÚ\u0001fs\u0003\u0000\u0000\u0000   r\"\u0000\u0000\u0000r\u001f\u0000\u0000\u0000z CVFileConfig.create_package_json1\u0000\u0000\u0000s¸\u0000\u0000\u0000\u0000Ø\u000f\u0013yy{{\u0004Ý\n\u0011Ð\u0012% sÑ\n+Ô\n+ð\u0000\u0001\t)¨qÝ\f\u0010IdA aÐ\f(Ñ\f(Ô\f(Ð\f(ð\u0003\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)ñ\u0000\u0001\t)ô\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)øøøð\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)ð\u0000\u0001\t)õ\u0006\u0000\t\u000b\tÐ\u0012*Ñ\b+Ô\b+Ð\b+Ý\b\ndjÐ\u001b@Ñ\u000e@Ñ\bAÔ\bAÐ\bAÐ\bAÐ\bAs\u0011\u0000\u0000\u0000¥\u0018A\t\u0003Á\t\u0004A\n\u0007Á\u0010\u0001A\n\u0007c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0003\u0000\u0000\u0000óÂ\u0000\u0000\u0000\u0000|\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0002t\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002d\u0003d\u0004\u0003|\u0000j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000j\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005\u0003d\u0006\tS\u0000)\u0007N)\u0002r\u0016\u0000\u0000\u0000r\u000e\u0000\u0000\u0000ú\u0001/F)\u0003Ú\u0007rootdirÚ\u0006outdirÚ\u0005which)\u0003r\u0017\u0000\u0000\u0000r\u0018\u0000\u0000\u0000r\u001c\u0000\u0000\u0000)\tr\u0013\u0000\u0000\u0000r\u001b\u0000\u0000\u0000r\u0019\u0000\u0000\u0000r\u001a\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000Ú\u0007scriptsÚ\u0006authorÚ\nconfigpath)\nr\u0013\u0000\u0000\u0000r\u001b\u0000\u0000\u0000r\u0019\u0000\u0000\u0000r\u001a\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000r\u0016\u0000\u0000\u0000r\u001d\u0000\u0000\u0000Ú\u0004NAMEr\u0017\u0000\u0000\u0000r\u0018\u0000\u0000\u0000Ú\u0003strr\u001c\u0000\u0000\u0000)\u0001r!\u0000\u0000\u0000s\u0001\u0000\u0000\u0000 r\"\u0000\u0000\u0000r*\u0000\u0000\u0000z\u0011CVFileConfig.file9\u0000\u0000\u0000s}\u0000\u0000\u0000\u0000à\u0014\u0018IØ\u0017\u001b|à\u001b\u001fÔ\u001b+Ø\u0014\u0018IØ\u0014\u0018IØ\u0018\u001c\nà\u0019\u001d\u001aØ\u001c Ô\u001c,ð\u0005\u0003\u0018\u000eð\u0000\u0003\u0018\u000eõ\n\u0000\u001c Ø\u001a\u001dØ\u0019\u001eð\u0007\u0004\u0017\u000eð\u0000\u0004\u0017\u000eð\f\u0000\u0019\u001d\tØ\u001a\u001e+Ý\u001d  \u0014¤\u001eÑ\u001d0Ô\u001d0ð\u0007\u0004\u001b\u000eð\u0000\u0004\u001b\u000eð#\u0016\u0010\nð\u0000\u0016\u0010\nð\u0000\u0016\t\nr$\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó¤\u0003\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002d\u0003d\u0004¦\u0004\u0000\u0000«\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002d\u0005¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002d\u0006¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002d\u0007¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000g\u0004}\u0001g\u0000d\b¢\u0001}\u0002t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001d\t\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sit\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\n¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000|\u0001D\u0000]\u0018}\u0003t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0003d\u000b¬\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0019|\u0002D\u0000]<}\u0004t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001d\n\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000b¬\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000=t\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u000e|\u0000 \f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003}\u0005t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001d\t\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0005¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0006t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u0018t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0006d\u000b¬\f¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000d\u0000S\u0000)\u000fNr(\u0000\u0000\u0000z\u000bdocs.configÚ\u0003binÚ\u0007loggingÚ\u0006configr2\u0000\u0000\u0000Ú\u0003src)\u0005Ú\u0002pyÚ\u0002jsÚ\u0002MDz\u0002c#Ú\u0004htmlr\u0002\u0000\u0000\u0000z\u001fSuccessfully created dir configT)\u0001Ú\bexist_okr\t\u0000\u0000\u0000Ú\u0001_)\nÚ\u0004timeÚ\u0005sleepr.\u0000\u0000\u0000r\u0017\u0000\u0000\u0000Ú\u0004joinr6\u0000\u0000\u0000Ú\u0005isdirr0\u0000\u0000\u0000Ú\bmakedirsr\u0010\u0000\u0000\u0000r\u0011\u0000\u0000\u0000r\u0012\u0000\u0000\u0000Ú\u000eread_file_json)\u0007r!\u0000\u0000\u0000Ú\u000bconfig_dirsÚ\tsrc_typesÚ\bdir_pathÚ\tfile_typeÚ\flog_dir_nameÚ\flog_dir_paths\u0007\u0000\u0000\u0000       r\"\u0000\u0000\u0000r \u0000\u0000\u0000z\u001aCVFileConfig.logging_setupR\u0000\u0000\u0000s\u0001\u0000\u0000\u0000Ý\b\f\n1\n\n\nå\f\u000eGLL\u0017 -°\u0015¸\tÑ\fBÔ\fBÝ\f\u000eGLL\u0017 -°\u0018Ñ\f:Ô\f:Ý\f\u000eGLL\u0017 -°\u0016Ñ\f8Ô\f8Ý\f\u000eGLL\u0017 -°\u0015Ñ\f7Ô\f7ð\t\u0005\u0017\n\u000bð\f\u0000\u00155Ð\u00144Ð\u00144\tå\u000f\u0011w}}[¨\u0011^Ñ\u000f,Ô\u000f,ð\u0000\u0006\tU\u0001Ý\f\u0011Ð\u00123Ñ\f4Ô\f4Ð\f4Ø\u001c'ð\u0000\u0001\n5ð\u0000\u0001\n5\bÝ\u0010\u0012\u000bH¨tÐ\u00104Ñ\u00104Ô\u00104Ð\u00104Ð\u00104à\u001d&ð\u0000\u0001\nU\u0001ð\u0000\u0001\nU\u0001\tÝ\u0010\u0012\u000bBGLL¨\u001b°R¬\u001f¸)Ñ\u001cDÔ\u001cDÈtÐ\u0010TÑ\u0010TÔ\u0010TÐ\u0010TÐ\u0010Tå\u001a\"-×\u001a-Ò\u001a-Ñ\u001a/Ô\u001a/Ð\u0017IÐ\u0017I°$×2EÒ2EÑ2GÔ2GÐ\u0017IÐ\u0017I\fÝ\u0017\u0019w|| K°\u0001¤N°LÑ\u0017AÔ\u0017A\fÝ\u000f\u0011w}}\\Ñ\u000f*Ô\u000f*ð\u0000\u0001\t5Ý\f\u000eK\f¨tÐ\f4Ñ\f4Ô\f4Ð\f4Ð\f4Ð\f4ð\u0003\u0001\t5ð\u0000\u0001\t5r$\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000}\u0001t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0002|\u0002d\u0003\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0002d\u0000d\u0000d\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000S\u0000#\u00001\u0000s\u0004w\u0002x\u0003Y\u0000w\u0001\u0001\u0000Y\u0000\u0001\u0000\u0001\u0000d\u0000S\u0000)\u0004Nr&\u0000\u0000\u0000Ú\u0001rr\u0013\u0000\u0000\u0000)\u0003r+\u0000\u0000\u0000r,\u0000\u0000\u0000Ú\u0004load)\u0003r!\u0000\u0000\u0000Ú\u0003R_Fr2\u0000\u0000\u0000s\u0003\u0000\u0000\u0000   r\"\u0000\u0000\u0000rN\u0000\u0000\u0000z\u001bCVFileConfig.read_file_jsoni\u0000\u0000\u0000s\u0000\u0000\u0000\u0000Ý\n\u0011Ð\u0012% sÑ\n+Ô\n+ð\u0000\u0002\t ¨sÝ\u0013\u00179S>>DØ\u0013\u0017\u0006<ð\u0005\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ñ\u0000\u0002\t ô\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t øøøð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t s\n\u0000\u0000\u0000\u001c:\u0003º\u0004>\u0007Á\u0001\u0001>\u0007c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000óÒ\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0001t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0002d\u0001|\u0002v\u0000r;t\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002z\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000d\u0000S\u0000)\u0003Nr&\u0000\u0000\u0000z file Docs.package.json is exists)\u0007r.\u0000\u0000\u0000Ú\u0006getcwdÚ\u0007listdirr0\u0000\u0000\u0000r\u0003\u0000\u0000\u0000Ú\u0003REDÚ\u0004exit)\u0003r!\u0000\u0000\u0000Ú\u0003locÚ\u0003liss\u0003\u0000\u0000\u0000   r\"\u0000\u0000\u0000r\u001e\u0000\u0000\u0000z\u0016CVFileConfig.is_existsn\u0000\u0000\u0000s\\\u0000\u0000\u0000\u0000Ý\f\u000eIKK\u0003Ý\f\u000eJsOO\u0003Ø\u000b\u001e #Ð\u000b%Ð\u000b%Ý\f\u0011Ð\u00124Ñ\f5Ô\f5Ð\f5Ý\f\u0011$(Ð\u001d?Ñ\u0012?Ñ\f@Ô\f@Ð\f@Ý\f\u0010FFFFFà\f\u0010Dr$\u0000\u0000\u0000)\nÚ\b__name__Ú\n__module__Ú\f__qualname__Ú\u0005NAMEfr#\u0000\u0000\u0000r\u001f\u0000\u0000\u0000r*\u0000\u0000\u0000r \u0000\u0000\u0000rN\u0000\u0000\u0000r\u001e\u0000\u0000\u0000©\u0000r$\u0000\u0000\u0000r\"\u0000\u0000\u0000r\u000b\u0000\u0000\u0000r\u000b\u0000\u0000\u0000\u0015\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ø\u001c!¨\u0002°R¸rÈ\u0002ÐSWÐegÐnpØ\u0019 ¨D¸4ð\u0003\u0018\u0005\u001dð\u0000\u0018\u0005\u001dð\u0000\u0018\u0005\u001dð\u0000\u0018\u0005\u001dð6\u0006\u0005B\u0001ð\u0000\u0006\u0005B\u0001ð\u0000\u0006\u0005B\u0001ð\u0010\u0017\u0005\nð\u0000\u0017\u0005\nð\u0000\u0017\u0005\nð2\u0015\u00055ð\u0000\u0015\u00055ð\u0000\u0015\u00055ð.\u0003\u0005 ð\u0000\u0003\u0005 ð\u0000\u0003\u0005 ð\n\b\u0005\u0011ð\u0000\b\u0005\u0011ð\u0000\b\u0005\u0011ð\u0000\b\u0005\u0011ð\u0000\b\u0005\u0011r$\u0000\u0000\u0000r\u000b\u0000\u0000\u0000)\u0018r,\u0000\u0000\u0000r.\u0000\u0000\u0000r\u0010\u0000\u0000\u0000rI\u0000\u0000\u0000Ú\u0005numpyÚ\u0002npÚ\bcoloramar\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000r\u0005\u0000\u0000\u0000Ú\bst_filesr\u0006\u0000\u0000\u0000r\u0017\u0000\u0000\u0000Ú\u0007abspathÚ\b__file__Ú\u0006__pathÚ\u0005splitÚ\u0005__varr6\u0000\u0000\u0000r0\u0000\u0000\u0000rZ\u0000\u0000\u0000r<\u0000\u0000\u0000rc\u0000\u0000\u0000r\u000b\u0000\u0000\u0000rd\u0000\u0000\u0000r$\u0000\u0000\u0000r\"\u0000\u0000\u0000ú\b<module>rn\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u0012\u0001\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\u000b\u000b\u000b\u000bØ\u0000\t\t\t\tØ\u0000\u000f\u000f\u000f\u000fØ\u0000\u000b\u000b\u000b\u000bØ\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012à\u0000\u000f\u000f\u000f\u000fØ\u0000&Ð\u0000&Ð\u0000&Ð\u0000&Ð\u0000&Ð\u0000&Ð\u0000&Ð\u0000&Ð\u0000&Ð\u0000&à\u0000(Ð\u0000(Ð\u0000(Ð\u0000(Ð\u0000(Ð\u0000(Ø\t\u000b\u0017\u001f\u001f\u0018Ñ\t\"Ô\t\"\u0006Ø\b\u000e\f\fTÑ\b\u001aÔ\b\u001a3B3Ô\b\u001f\u0005à\n\u001b\u0007Ø\u0000\u0005\u0005g\u000e\u000e\u000eà\u0007\u0010ry{{\u0004Ø\b\f\n\n4Ñ\b\u0018Ô\b\u0018\u0012Ô\b\u001c\u0005ð\u0006a\u0001\u0001\u0011ð\u0000a\u0001\u0001\u0011ð\u0000a\u0001\u0001\u0011ð\u0000a\u0001\u0001\u0011ð\u0000a\u0001\u0001\u0011ñ\u0000a\u0001\u0001\u0011ô\u0000a\u0001\u0001\u0011ð\u0000a\u0001\u0001\u0011ðH\u0003\u0000\u0001\n\f\u000e\u000e\u000e\u000e\u000er$\u0000\u0000\u0000"
                            }
                        },
                        {
                            "st_files.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000ç£fm\u0007\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó4\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0000d\u0000d\u0001l\u0001Z\u0001d\u0000d\u0001l\u0002Z\u0002d\u0000d\u0001l\u0003Z\u0004d\u0002\u0000Z\u0005d\u0005d\u0004\u0001Z\u0006d\u0001S\u0000)\u0006é\u0000\u0000\u0000\u0000Nc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó:\u0001\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0000t\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0000|\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0001t\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0002t\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002d\u0002¬\u0003¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000}\u0003}\u0004t\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0005|\u0003|\u0005\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0006|\u0004|\u0005\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0007|\u0007|\u0006|\u0003|\u0001|\u0000d\u0004\u0005S\u0000)\u0005Nc\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0013\u0000\u0000\u0000ó8\u0000\u0000\u0000\u0000|\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000)\u0003Nú\u0001.éÿÿÿÿ)\u0001Ú\u0005split)\u0001Ú\u0001xs\u0001\u0000\u0000\u0000 ú9D:\\App.py\\progrmming\\configrition\\json_config\\st_files.pyú\b<lambda>z$find_max_extension.<locals>.<lambda>\u000e\u0000\u0000\u0000s\u0015\u0000\u0000\u0000\u0000agg cll¨2Ô\u001e.\u0000ó\u0000\u0000\u0000\u0000T)\u0001Ú\nreturn_counts)\u0005Ú\nmaxextensionsÚ\textensionz\u0012Unique extensions:z\u000fAll extensions:Ú\u0005files)\tÚ\u0002osÚ\u0007listdirÚ\u0006getcwdÚ\u0004listÚ\u0003mapÚ\u0002npÚ\u0005arrayÚ\u0006uniqueÚ\u0006argmax)\bÚ\u0003dirÚ\u0004exicÚ\u0003lisr\u0017\u0000\u0000\u0000Ú\u0006countsÚ\u0013most_frequent_indexÚ\u0015most_frequent_elementÚ\u0005counts\b\u0000\u0000\u0000        r\t\u0000\u0000\u0000Ú\u0012find_max_extensionr \u0000\u0000\u0000\t\u0000\u0000\u0000s¨\u0000\u0000\u0000\u0000å\n\f*RY[[Ñ\n!Ô\n!Cõ\u0006\u0000\f\u0010\u0003Ð\u0014.Ð\u0014.°\u0003Ñ\u00104Ô\u00104Ñ\u000b5Ô\u000b5Dõ\b\u0000\u000b\n(4..Cõ\u0006\u0000\u0016\u0018Ys°$Ð\u00157Ñ\u00157Ô\u00157NFFõ\u0006\u0000\u001b\u001d) FÑ\u001a+Ô\u001a+Ð\u0004\u0017ð\u0006\u0000\u001d#Ð#6Ô\u001c7Ð\u0004\u0019Ø\f\u0012Ð\u0013&Ô\f'Eð\u0012\u0000\u0019\u001eØ\u0014)Ø\u001d#Ø\u001c Ø\u0010\u0013ð\u000b\u0007\n\u0006ð\u0000\u0007\n\u0006ð\u0000\u0007\u0005\u0006r\u000b\u0000\u0000\u0000é\u0005\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000óú\u0001\u0000\u0000\u0000g\u0000d\u0001¢\u0001}\u0001t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000z\u0000\u0000\u0000}\u0002t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002k\u0000\u0000\u0000\u0000\u0000rp|\u0001D\u0000]V}\u0003t\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002|\u0003z\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000Wt\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002k\u0000\u0000\u0000\u0000\u0000°pt\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002d\u0004t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001d\u0005\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0005\u0000\u0000z\u0000\u0000\u0000d\u0002z\u0000\u0000\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0006N)\u0004z\nLoading   z\nLoading.  z\nLoading.. z\nLoading...ú\u0001\ng\u0000\u0000\u0000\u0000\u0000\u0000à?ú\u0001 r\u0006\u0000\u0000\u0000)\u0007Ú\u0004timeÚ\u0003sysÚ\u0006stdoutÚ\u0005writeÚ\u0005flushÚ\u0005sleepÚ\u0003len)\u0004Ú\bdurationÚ\tanimationÚ\bend_timeÚ\u0005frames\u0004\u0000\u0000\u0000    r\t\u0000\u0000\u0000Ú\u0011loading_animationr0\u0000\u0000\u0000/\u0000\u0000\u0000sÞ\u0000\u0000\u0000\u0000à\u0010HÐ\u0010HÐ\u0010HIõ\u0006\u0000\u0010\u0014y{{XÑ\u000f%Hõ\u0006\u0000\u000b\u000f)++\bÒ\n Ð\n Ø\u0015\u001eð\u0000\u0005\t\u001cð\u0000\u0005\t\u001cEå\f\u000fJ×\f\u001cÒ\f\u001cT E\\Ñ\f*Ô\f*Ð\f*Ý\f\u000fJ×\f\u001cÒ\f\u001cÑ\f\u001eÔ\f\u001eÐ\f\u001eå\f\u0010JsOOOOõ\n\u0000\u000b\u000f)++\bÒ\n Ð\n õ\u0012\u0000\u0005\bJ×\u0004\u0014Ò\u0004\u0014TC¥# i°\u0002¤mÑ\"4Ô\"4Ñ\u001c4Ñ\u00154°tÑ\u0015;Ñ\u0004<Ô\u0004<Ð\u0004<Ý\u0004\u0007J×\u0004\u0014Ò\u0004\u0014Ñ\u0004\u0016Ô\u0004\u0016Ð\u0004\u0016Ð\u0004\u0016Ð\u0004\u0016r\u000b\u0000\u0000\u0000)\u0001r!\u0000\u0000\u0000)\u0007r%\u0000\u0000\u0000r&\u0000\u0000\u0000r\u0010\u0000\u0000\u0000Ú\u0005numpyr\u0015\u0000\u0000\u0000r \u0000\u0000\u0000r0\u0000\u0000\u0000©\u0000r\u000b\u0000\u0000\u0000r\t\u0000\u0000\u0000ú\b<module>r3\u0000\u0000\u0000\u0001\u0000\u0000\u0000sZ\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001à\u0000\u000b\u000b\u000b\u000bØ\u0000\n\n\n\nØ\u0000\t\t\t\tà\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012ð\u0006\"\u0001\u0006ð\u0000\"\u0001\u0006ð\u0000\"\u0001\u0006ðL\u0001\u0012\u0001\u0017ð\u0000\u0012\u0001\u0017ð\u0000\u0012\u0001\u0017ð\u0000\u0012\u0001\u0017ð\u0000\u0012\u0001\u0017ð\u0000\u0012\u0001\u0017r\u000b\u0000\u0000\u0000"
                            }
                        },
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000t¾£f\t\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0006\u0000\u0000\u0000\u0000d\u0000S\u0000)\u0001N©\u0000r\u0002\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000ú9D:\\App.py\\progrmming\\configrition\\json_config\\__init__.pyú\b<module>r\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u000f\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0000\u0001\u0001\u0001ð\u0000\u0001\u0001\u0001r\u0003\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "CVJson.py": {
                            "type": "text",
                            "content": "import json\nimport os\nimport datetime\nimport time\nimport numpy as np\n\nimport colorama\nfrom colorama import Fore, Back, Style\n\nfrom st_files import  find_max_extension\n\n__path = os.path.abspath(__file__)\n__var = __path.split('\\\\')[:-3]\n\nrootdir = 'E:\\\\LOc\\\\User\\\\'\nprint(rootdir)\n\nNAME = os.getcwd()\nNAMEf = NAME.split('\\\\')[-1]\n\n\nclass CVFileConfig:\n    def __init__(self, name=NAMEf, type=\"\", language=\"\", start=\"\", path=\"\", inside=None, description=\"\", main=\"\",\n                 version='1.0.0', orderdate=None,extension=None):\n        if inside is None:\n            inside = []\n        if orderdate is None:\n            orderdate = datetime.date.today()\n        if extension is None:\n            extension = find_max_extension()['extension']\n\n\n        self.name = name\n        self.type = type\n        self.language = language\n        self.start = start\n        self.path = path\n        self.inside = find_max_extension()['files']\n        self.description = description\n        self.main = main\n        self.version = version\n        self.orderdate = orderdate\n        self.maxextefile=extension\n\n        self.is_exists()\n        self.create_package_json()\n        self.logging_setup()\n\n\n    def create_package_json(self):\n        data = self.file()\n        with open(\"Docs.package.json\", 'w') as f:\n            json.dump(data, f, indent=2)\n\n        os.system('type Docs.package.json')\n        print(Fore.GREEN + 'has been created  Docs.package.json')\n\n    def file(self):\n        return {\n            \"name\": self.name,\n            \"version\": self.version,\n\n            \"description\": self.description,\n            \"main\": self.main,\n            \"type\": self.type,\n            \"language\": self.language,\n            \"scripts\": {\n                \"start\": self.start,\n                \"extension\":self.maxextefile\n            },\n            \"author\": {\n                \"rootdir\": NAME,\n                \"outdir\": \"/\",\n                \"which\": False,\n            },\n            \"configpath\": {\n                \"path\": self.path,\n                \"inside\": self.inside,\n                'orderdate': str(self.orderdate),\n            }\n        }\n\n    def logging_setup(self):\n        time.sleep(2)\n        config_dirs = [\n            os.path.join(rootdir, \"docs.config\", \"bin\", \"logging\"),\n            os.path.join(rootdir, \"docs.config\", \"config\"),\n            os.path.join(rootdir, \"docs.config\", \"data\"),\n            os.path.join(rootdir, \"docs.config\", \"src\")\n        ]\n        src_types = ['py', 'js', 'MD', 'c#', 'html']\n\n        if not os.path.isdir(config_dirs[0]):\n            print('Successfully created dir config')\n            for dir_path in config_dirs:\n                os.makedirs(dir_path, exist_ok=True)\n\n            for file_type in src_types:\n                os.makedirs(os.path.join(config_dirs[-1], file_type), exist_ok=True)\n\n        log_dir_name = f\"{datetime.date.today()}_{self.read_file_json()}\"\n        log_dir_path = os.path.join(config_dirs[0], log_dir_name)\n        if not os.path.isdir(log_dir_path):\n            os.makedirs(log_dir_path, exist_ok=True)\n\n    def read_file_json(self):\n        with open('Docs.package.json', 'r') as R_F:\n            data = json.load(R_F)\n            return data['name']\n\n    def is_exists(self):\n        loc=os.getcwd()\n        lis=os.listdir(loc)\n        if 'Docs.package.json' in lis:\n\n            print(Fore.RED + 'file Docs.package.json is exists')\n\n\n            exit()\n        else:\n            pass\n\n\nimport msvcrt\n\n"
                        }
                    },
                    {
                        "Docs.package.json": {
                            "type": "text",
                            "content": "{\n  \"name\": \"json_config\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"\",\n  \"type\": \"\",\n  \"language\": \"\",\n  \"scripts\": {\n    \"start\": \"\",\n    \"extension\": \"py\"\n  },\n  \"author\": {\n    \"rootdir\": \"D:\\\\App.py\\\\progrmming\\\\configrition\\\\json_config\",\n    \"outdir\": \"/\",\n    \"which\": false\n  },\n  \"configpath\": {\n    \"path\": \"\",\n    \"inside\": [\n      \"CVJson.py\",\n      \"main.py\",\n      \"st_files.py\",\n      \"__init__.py\",\n      \"__pycache__\"\n    ],\n    \"orderdate\": \"2024-07-26\"\n  }\n}"
                        }
                    },
                    {
                        "index.py": {
                            "type": "text",
                            "content": ""
                        }
                    },
                    {
                        "main.py": {
                            "type": "text",
                            "content": "import weakref\n\nclass MyClass:\n    def __init__(self, value):\n        self.value = value\n    def __del__(self):\n        print(f'{self} is being deleted')\n\nobj = MyClass(10)\nweak_ref = weakref.ref(obj)\n\nprint(weak_ref)      # <weakref at 0x...; to 'MyClass' at 0x...>\nprint(weak_ref())    # <__main__.MyClass object at 0x...>\n"
                        }
                    },
                    {
                        "st_files.py": {
                            "type": "text",
                            "content": "\nimport time\nimport sys\nimport os\n\nimport numpy as np\n\n\ndef find_max_extension():\n    # List all files in the current working directory\n    dir = os.listdir(os.getcwd())\n\n    # Extract the file extensions from the list of files\n    exic = list(map(lambda x: x.split('.')[-1], dir))\n\n\n    # Create a NumPy array with the file extensions\n    lis = np.array(exic)\n\n    # Get the unique elements (extensions) and their corresponding counts in the array\n    unique, counts = np.unique(lis, return_counts=True)\n\n    # Find the index of the maximum count\n    most_frequent_index = np.argmax(counts)\n\n    # Retrieve the most frequent element (extension) and its count based on the index\n    most_frequent_element = unique[most_frequent_index]\n    count = counts[most_frequent_index]\n\n    # Print the most frequent element (extension) and its count\n\n\n    # Print the unique extensions and their counts for debugging purposes\n\n\n    return  {\n        'maxextensions':count,\n        'extension':most_frequent_element,\n        'Unique extensions:':unique,\n        \"All extensions:\" : exic,\n        'files':dir\n\n    }\n\n\n\ndef loading_animation(status=True):\n    duration =1\n    while status:\n        # Characters to display in the loading animation\n        animation = [\"Loading   \", \"Loading.  \", \"Loading.. \", \"Loading...\"]\n\n        # End time for the loading animation\n        end_time = time.time() + duration\n\n        # Loop until the duration has passed\n        while time.time() < end_time:\n            for frame in animation:\n                # Print the current frame and flush the output buffer\n                sys.stdout.write(\"\\r\" + frame)\n                sys.stdout.flush()\n                # Sleep for a short interval to create the animation effect\n                time.sleep(0.5)\n\n        # Clear the loading message after completion\n        sys.stdout.write(\"\\r\" + \" \" * len(animation[-1]) + \"\\r\")\n        sys.stdout.flush()\n        duration +=1\n\n\na=True\n\nwhile a:\n\n    loading_animation(a)\n\n    time.sleep(5)\n\n    a=False\n\n\n"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "# import  json\n# import os\n#\n# import datetime\n# import time\n#\n# __path: str = os.path.abspath(__file__)\n# __var: str = __path.split('\\\\')[:-3]\n# rootdir =os.path.expanduser('~')\n# print(rootdir)\n# NAME = os.getcwd()\n# # NAME = NAME.split('\\\\')[-1]\n# class FileConfing:\n#     def __init__(self,name=NAME , type:str=\"\",language=\"\",start=\"\",path=\"\",inside=\"\",description=\"\", main=\"\",version='1.0.0'):\n#         with open(\"Docs.package.json\",'w')as f:\n#\n#             json.dump(self.file(\n#                 type=type,\n#                 language=language,\n#                 start=start,\n#                 path=path,\n#                 inside=inside,\n#                 description=description,\n#                 main=main,\n#                 version=version,\n#                 name=name\n#                 ),f,indent=2,)\n#         self.loggin()\n#\n#         os.system('cat Docs.package.json')\n#     def file(self,\n#              type=\"\"\n#              ,language=\"\",\n#              start=\".\",\n#              path=\"\",\n#              inside=\"\",\n#              description=\"\",\n#              main=\"\",\n#              version='1.0.0',\n#              name=NAME):\n#\n#\n#         return {\"name\":name,\n#                 \"version\":version,\n#                 \"description\": description,\n#                 \"main\": main,\n#                 \"type\":type,\n#                 \"language\":language,\n#                 \"scripts\": {\n#                     \"start\": start},\n#                 \"author\": {\n#                     \"rootdir\": f\"{NAME}\",\n#                     \"outdir\": \"/\",\n#                     \"which\": False,\n#                 },\n#                 \"configpath\":{\n#                     \"path\":path,\n#                     \"inside\":inside\n#                 }\n#\n#                 }\n#\n#     def loggin(self):\n#         time.sleep(2)\n#         if not os.path.isdir(f\"{rootdir}/docs.config/bin\"):\n#             print(rootdir)\n#             os.system(f\"cd /d {rootdir}/docs.config && mkdir bin && cd /d bin && mkdir logging \")\n#         name=str(f\"{datetime.date.today()}_{self.__reade_file_json()}\")\n#         os.system(f\"cd /d {rootdir}/docs.config/bin/logging && mkdir {name}\")\n#\n#\n#\n#\n#\n#\n#     def __reade_file_json(self):\n#         with open('Docs.package.json','r')as R_F:\n#             name=json.load(R_F,)\n#             return name['name']\n#\n#\n# __all__=[\n#     'FileConfing'\n# ]"
                        }
                    }
                ]
            },
            "Path_x": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000tÚªf\\\u0001\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó>\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0000d\u0000d\u0001l\u0001Z\u0002d\u0000d\u0002l\u0000m\u0003Z\u0003\u0001\u0000\u0002\u0000G\u0000d\u0003\u0000d\u0004e\u0003¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0004d\u0001S\u0000)\u0005é\u0000\u0000\u0000\u0000N)\u0001Ú\u0004Enumc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó^\u0001\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002U\u0000e\u0003j\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0004e\u0007e\bd\u0001<\u0000\u0000\u0000e\u0003j\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\ne\u000be\bd\u0003<\u0000\u0000\u0000e\u0004 \f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005d\u0006\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\ne\u0007e\bd\u0007<\u0000\u0000\u0000d\u0004 \u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\n¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u000fe\u0004 \f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005d\b\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0010d\u0004 \u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0010¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0011d\u0005S\u0000)\tÚ\u0004PathÚ\u0004pathú\u0001~Ú\u0003HOMú\u0001\\NéýÿÿÿÚ\u0003varéÿÿÿÿ)\u0012Ú\b__name__Ú\n__module__Ú\f__qualname__Ú\u0002osr\u0006\u0000\u0000\u0000Ú\u0007abspathÚ\b__file__Ú\u0003strÚ\u000f__annotations__Ú\nexpanduserr\b\u0000\u0000\u0000Ú\u0003setÚ\u0005splitr\u000b\u0000\u0000\u0000Ú\u0004joinÚ\u0004rootÚ\u0003binÚ\broot_bin©\u0000ó\u0000\u0000\u0000\u0000ú4D:\\App.py\\progrmming\\configrition\\Path_x\\__init__.pyr\u0005\u0000\u0000\u0000r\u0005\u0000\u0000\u0000\u0005\u0000\u0000\u0000s«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ø\n\u000fW__XÑ\n&Ô\n&D\u0013Ð\u0004&Ð\u0004&Ñ\u0004&à\f\u000eG×\f\u001eÒ\f\u001esÑ\f#Ô\f#C\u0003Ð\u0004#Ð\u0004#Ñ\u0004#Ø\f\u0010JJtÑ\f\u001cÔ\f\u001cSbSÔ\f!C\u0003Ð\u0004!Ð\u0004!Ñ\u0004!Ø\t\n\u0019\u00193\u001e\u001eDà\b\f\n\n4Ñ\b\u0018Ô\b\u0018\u0013\"\u0013Ô\b\u001dCØ\n\u0011YYs^^HHHr\u001d\u0000\u0000\u0000r\u0005\u0000\u0000\u0000)\u0005Ú\u0004enumÚ\u0007os.pathr\u0010\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0005\u0000\u0000\u0000r\u001c\u0000\u0000\u0000r\u001d\u0000\u0000\u0000r\u001e\u0000\u0000\u0000ú\b<module>r!\u0000\u0000\u0000\u0001\u0000\u0000\u0000s]\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\u000b\u000b\u000b\u000bØ\u0000\u000e\u000e\u000e\u000eØ\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016Ð\u0000\u0016ð\u0004\b\u0001\u001cð\u0000\b\u0001\u001cð\u0000\b\u0001\u001cð\u0000\b\u0001\u001cð\u0000\b\u0001\u001c4ñ\u0000\b\u0001\u001cô\u0000\b\u0001\u001cð\u0000\b\u0001\u001cð\u0000\b\u0001\u001cð\u0000\b\u0001\u001cr\u001d\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "plaintext.txt": {
                            "type": "text",
                            "content": "\"C:\\Users\\TREND PC\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" D:\\App.py\\progrmming\\configrition\\Path_x\\يبيب.py\nTraceback (most recent call last):\n  File \"D:\\App.py\\progrmming\\configrition\\Path_x\\يبيب.py\", line 37, in <module>\n    encrypt_file('plaintext.txt', 'yourpassword')\n  File \"D:\\App.py\\progrmming\\configrition\\Path_x\\يبيب.py\", line 24, in encrypt_file\n    with open(file_path, 'rb') as f:\n         ^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'plaintext.txt'\n\nProcess finished with exit code 1\n"
                        }
                    },
                    {
                        "plaintext.txt.enc": {
                            "type": "text",
                            "content": "Z.TÇço×qÖÎwv9þeQ\u001fz÷,Y\u0013$¨àKúS~nëWÉë±d\u0001xpüï\u0003Ýô\u0001n®äÃG;%ð%Í¨O\u0000À¾Jxær\u0011ê4aþ\u0017¼jaï¸Öä[f±ysøú\u001dË<¶]\u0011U¦­ c\u0003¶ôµùw=CKé 0¡JT]yA\u000f ¡g½\u0012¢í~Ãõg\u0007\fª>¼A]º{?dczÀ¶\u0013Ô¬¸Ò+áFEÂõ±j\u001dL)ëá&¥~ojke9ÄpÎ\u000eóÜs:æ%Ë½|©\tô\u001a¡ªý~&}ÙkÃü±ÿ{,MÚP;özò%XS\u0003=î\fï8½VÝbj£º\u0017-/S%D\nø>L?\\\u001f¶\n¼u¯!\u0019\u0000P^fþïÙ\u001eV\u001bU~\u0019Üì!a±\u0011Ý(ü».í§(*ËÄ\u0010ÇÿéQÿ\u001d7G\u0006,\u001dä^S)©µZ^0_À}©û!te¼@{jõ¼ßÉøÉñ\u000bnt,ÒÜ\u0003}AàÑã:t#l]Î¶4àÐÕ¹CjÀo¶\"vPÝ\u0017Ì óÎÔ(7øþ\u0000Þn\u0002i+ÇA\u0019\u000eC3¡]DÙY\u000byÑW\u001e0\u0015&2Ö\u0010Ðæ¨ÕÜ\f¸æ\u0015'b \u0003\u0006úRñ!J+ÁNá¹øyR±\n\u00051.¦\u0005äF¶¿\u001fÒÂ?Pz\u0015v´gÙí\u001dr5é\u00182ba¦µE»^-RªO$m+]hì$³K\u001cÄÛÔ\f§\u0007&#ð{T\u000fsn\u0010'OLr#sIçüîîñ\u000eàhï±HòÒ<Àódèäj\u001b!¿èwt<B\u00131ä÷x0¸>ýúûù{\nop}ý\u0004ìsedsedssssssssssssssssssssssssssssssssssedssssssssssssssssssssssssssssssssssedssssssssssssssssssssssssssssssssssedsssssssssssssssssssssssssssssssss"
                        }
                    },
                    {
                        "plaintext.txt_decrypted.txt": {
                            "type": "text",
                            "content": "\"C:\\Users\\TREND PC\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" D:\\App.py\\progrmming\\configrition\\Path_x\\يبيب.py\nTraceback (most recent call last):\n  File \"D:\\App.py\\progrmming\\configrition\\Path_x\\يبيب.py\", line 37, in <module>\n    encrypt_file('plaintext.txt', 'yourpassword')\n  File \"D:\\App.py\\progrmming\\configrition\\Path_x\\يبيب.py\", line 24, in encrypt_file\n    with open(file_path, 'rb') as f:\n         ^^^^^^^^^^^^^^^^^^^^^\nFileNotFoundError: [Errno 2] No such file or directory: 'plaintext.txt'\n\nProcess finished with exit code 1\n"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "import enum\nimport os.path\nfrom enum import  Enum\n\nclass Path(Enum):\n    path:str=os.path.abspath(__file__)\n\n    HOM:set=os.path.expanduser('~')\n\n    var:str=path.split('\\\\')[:-3]\n    root='\\\\'.join(var)\n\n    bin=path.split('\\\\')[:-1]\n    root_bin='\\\\'.join(bin)\n\n\n"
                        }
                    },
                    {
                        "فك.py": {
                            "type": "text",
                            "content": "from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nfrom cryptography.hazmat.backends import default_backend\n\ndef decrypt_file(file_path, password):\n    # قراءة البيانات من الملف المشفر\n    with open(file_path, 'rb') as f:\n        data = f.read()\n\n    # استخراج الملح و IV والنص المشفر\n    salt = data[:16]\n    iv = data[16:32]\n    ciphertext = data[32:]\n\n    # استخدام Scrypt لاشتقاق مفتاح التشفير من كلمة المرور\n    kdf = Scrypt(salt=salt, length=32, n=2**14, r=8, p=1, backend=default_backend())\n    key = kdf.derive(password.encode())\n\n    # إنشاء كائن فك التشفير\n    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())\n    decryptor = cipher.decryptor()\n\n    # فك تشفير البيانات\n    plaintext = decryptor.update(ciphertext) + decryptor.finalize()\n\n    # كتابة النص العادي إلى ملف جديد\n    with open(file_path.replace('.enc', '_decrypted.txt'), 'wb') as f:\n        f.write(plaintext)\n\n    print(f\"File '{file_path}' has been decrypted to '{file_path.replace('.enc', '_decrypted.txt')}'\")\n\n# مثال على الاستخدام\ndecrypt_file('plaintext.txt.enc', 'yourpassword')\n\nwith open('plaintext.txt.enc','a') as s:\n    print(s.write('sedsssssssssssssssssssssssssssssssss'))"
                        }
                    },
                    {
                        "يبيب.py": {
                            "type": "text",
                            "content": "from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nfrom cryptography.hazmat.backends import default_backend\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.scrypt import Scrypt\nimport os\n\ndef encrypt_file(file_path, password):\n    # إنشاء ملح (salt) عشوائي\n    salt = os.urandom(16)\n\n    # استخدام Scrypt لاشتقاق مفتاح التشفير من كلمة المرور\n    kdf = Scrypt(salt=salt, length=32, n=2**14, r=8, p=1, backend=default_backend())\n    key = kdf.derive(password.encode())\n\n    # إنشاء IV عشوائي\n    iv = os.urandom(16)\n\n    # إنشاء كائن التشفير\n    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())\n    encryptor = cipher.encryptor()\n\n    # قراءة محتويات الملف\n    with open(file_path, 'rb') as f:\n        plaintext = f.read()\n\n    # تشفير البيانات\n    ciphertext = encryptor.update(plaintext) + encryptor.finalize()\n\n    # كتابة الملح و IV والنص المشفر إلى ملف جديد\n    with open(file_path + '.enc', 'wb') as f:\n        f.write(salt + iv + ciphertext)\n\n    print(f\"File '{file_path}' has been encrypted to '{file_path}.enc'\")\n\n# مثال على الاستخدام\nencrypt_file('plaintext.txt', 'yourpassword')\n"
                        }
                    }
                ]
            },
            "__pycache__": {
                "files": [
                    {
                        "__init__.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000´Ìªf&\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0012\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000m\u0001Z\u0001\u0001\u0000d\u0002S\u0000)\u0003é\u0000\u0000\u0000\u0000)\u0001Ú\u0004PathN)\u0002Ú\u0013configrition.Path_xr\u0003\u0000\u0000\u0000©\u0000ó\u0000\u0000\u0000\u0000ú-D:\\App.py\\progrmming\\configrition\\__init__.pyú\b<module>r\b\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u001d\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$r\u0006\u0000\u0000\u0000"
                        }
                    }
                ]
            },
            "files": [
                {
                    "index.py": {
                        "type": "text",
                        "content": ""
                    }
                },
                {
                    "__init__.py": {
                        "type": "text",
                        "content": "from configrition.Path_x import Path\n"
                    }
                },
                {
                    "__init__.pyi": {
                        "type": "text",
                        "content": ""
                    }
                }
            ]
        },
        "data": {
            "files": [
                {
                    ".bash": {
                        "type": "text",
                        "content": "mkdir \".src\"\ngrep ''"
                    }
                },
                {
                    "app.py": {
                        "type": "text",
                        "content": "import mysql.connector\n\n## Now connecting to the database using 'connect()' method\n## it takes 3 required parameters 'host', 'user', 'passwd'\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"root\",\n  password=\"904724\"\n)\n\nprint(mydb)"
                    }
                },
                {
                    "area": {
                        "type": "text",
                        "content": "D:\\Src\\src\\DirConfigrion.json\nD:\\Src\\src\\js\nD:\\Src\\src\\py\nD:\\Src\\src\\js\\config.json\nD:\\Src\\src\\js\\library\nD:\\Src\\src\\js\\porject\nD:\\Src\\src\\js\\Refernsec\nD:\\Src\\src\\js\\library\\config.json\nD:\\Src\\src\\js\\library\\npm\nD:\\Src\\src\\js\\library\\npm.rar\nD:\\Src\\src\\js\\library\\React-Nitve\nD:\\Src\\src\\js\\library\\React-Nitve\\devlop-app\nD:\\Src\\src\\py\\config.json\nD:\\Src\\src\\py\\library\nD:\\Src\\src\\py\\porject\nD:\\Src\\src\\py\\Refernsec\n"
                    }
                },
                {
                    "config.ini": {
                        "type": "text",
                        "content": "[repo]\njs = ['config.json', 'library', 'porject', 'Refernsec']\npy = ['config.json', 'library', 'porject', 'Refernsec']\n\n[CWD]\ndir = D:\\Src\\bin\n\n"
                    }
                },
                {
                    "dir_info": {
                        "type": "text",
                        "content": "cd /d .src & mkdir bin & mkdir hook"
                    }
                },
                {
                    "index.py": {
                        "type": "text",
                        "content": "\nfrom _configrition import *\n\ndef revers(*args,**kwargs):\n    \"\"\"\n        Return a list containing the names of the files in the directory.\n\n        path can be specified as either str, bytes, or a path-like object.  If path is bytes,\n          the filenames returned will also be bytes; in all other circumstances\n          the filenames returned will be str.\n        If path is None, uses the path='.'.\n        On some platforms, path may also be specified as an open file descriptor;\\\n          the file descriptor must refer to a directory.\n          If this functionality is unavailable, using it raises NotImplementedError.\n\n        The list is in arbitrary order.  It does not include the special\n        entries '.' and '..' even if they are present in the directory.\n        \"\"\"\n    pass"
                    }
                },
                {
                    "index.pyi": {
                        "type": "text",
                        "content": "from ..configrition import *\ndef revers(var: str):...\n\n"
                    }
                },
                {
                    "__init__.py": {
                        "type": "text",
                        "content": ""
                    }
                }
            ]
        },
        "event": {
            "config": {
                "__pycache__": {
                    "files": [
                        {
                            "__init__.cpython-311.pyc": {
                                "type": "text",
                                "content": "§\n\n\u0000\u0000\u0000\u0000@`\u000ff \b\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000óL\u0001\u0000\u0000\u0000U\u0000d\u0000d\u0001l\u0000Z\u0000d\u0000d\u0001l\u0001Z\u0001d\u0000d\u0001l\u0002Z\u0002d\u0000d\u0001l\u0003Z\u0003e\u0001j\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0007e\be\td\u0002<\u0000\u0000\u0000e\u0007 \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0004\u0002\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u000be\be\td\u0005<\u0000\u0000\u0000e\u0001j\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\n\u0002\u0000e\u0001j\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u000fe\u000f \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0007\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u000f\u0002\u0000G\u0000d\b\u0000d\t¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0010d\u0001S\u0000)\né\u0000\u0000\u0000\u0000NÚ\u0006__pathú\u0001\\éýÿÿÿÚ\u0005__varú\u0001~éÿÿÿÿc\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000óT\u0000\u0000\u0000\u0000e\u0000Z\u0001d\u0000Z\u0002e\u0003d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0001d\u0002f\td\u0003e\u0004f\u0002d\u0004\u0005Z\u0005d\u0001d\u0001d\u0005d\u0001d\u0001d\u0001d\u0001d\u0002e\u0003f\td\u0006\u0001Z\u0006d\u0007\u0000Z\u0007d\b\u0000Z\bd\tS\u0000)\nÚ\u000bFileConfingÚ\u0000z\u00051.0.0Ú\u0004typec\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\f\u0001\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000}\nt\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000 \u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0002|\u0003|\u0004|\u0005|\u0006|\u0007|\b|\t|\u0001¬\u0003¦\t\u0000\u0000«\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\nd\u0004¬\u0005¦\u0003\u0000\u0000«\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000d\u0000d\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000n\u000b#\u00001\u0000s\u0004w\u0002x\u0003Y\u0000w\u0001\u0001\u0000Y\u0000\u0001\u0000\u0001\u0000|\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0006¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0007Nú\u0010Docs.config.jsonÚ\u0001w)\tr\f\u0000\u0000\u0000Ú\blanguageÚ\u0005startÚ\u0004pathÚ\u0006insideÚ\u000bdescriptionÚ\u0004mainÚ\u0007versionÚ\u0004nameé\u0002\u0000\u0000\u0000)\u0001Ú\u0006indentz\u0014cat Docs.config.json)\u0007Ú\u0004openÚ\u0004jsonÚ\u0004dumpÚ\u0004fileÚ\u0006logginÚ\u0002osÚ\u0006system)\u000bÚ\u0004selfr\u0017\u0000\u0000\u0000r\f\u0000\u0000\u0000r\u0010\u0000\u0000\u0000r\u0011\u0000\u0000\u0000r\u0012\u0000\u0000\u0000r\u0013\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000r\u0016\u0000\u0000\u0000Ú\u0001fs\u000b\u0000\u0000\u0000           ú,D:\\Src-2\\progrmming\\event\\config\\__init__.pyÚ\b__init__z\u0014FileConfing.__init__\u000e\u0000\u0000\u0000sÛ\u0000\u0000\u0000\u0000Ý\n\u0011Ð\u0012$ SÑ\n)Ô\n)ð\u0000\f\t\u001f¨Aå\f\u0010IdiiØ\u0015\u0019Ø\u0019!Ø\u0016\u001bØ\u0015\u0019Ø\u0017\u001dØ\u001c'Ø\u0015\u0019Ø\u0018\u001fØ\u0015\u0019ð\u0013\u0000\u0017 ñ\u0000\n\u0017\u0012ô\u0000\n\u0017\u0012ð\u0014\u0000\u0013\u00141ð\u0015\n\n\u001fñ\u0000\n\n\u001fô\u0000\n\n\u001fð\u0000\n\n\u001fð\u0005\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fñ\u0000\f\t\u001fô\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001føøøð\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fð\u0000\f\t\u001fð\u001a\u0000\t\n\u000b\u000b\n\n\nå\b\n\tÐ\u0012(Ñ\b)Ô\b)Ð\b)Ð\b)Ð\b)s\u0011\u0000\u0000\u00004A\u0011\u0003Á\u0011\u0004A\u0015\u0007Á\u0018\u0001A\u0015\u0007ú\u0001.c\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó,\u0000\u0000\u0000\u0000|\t|\b|\u0006|\u0007|\u0001|\u0002d\u0001|\u0003i\u0001d\u0002d\u0002d\u0003d\u0004\u0003|\u0004|\u0005d\u0005\u0002d\u0006\tS\u0000)\u0007Nr\u0011\u0000\u0000\u0000ú\u0001/F)\u0003Ú\u0007rootdirÚ\u0006outdirÚ\u0005which)\u0002r\u0012\u0000\u0000\u0000r\u0013\u0000\u0000\u0000)\tr\u0017\u0000\u0000\u0000r\u0016\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000r\f\u0000\u0000\u0000r\u0010\u0000\u0000\u0000Ú\u0007scriptsÚ\u0006authorÚ\nconfigpath©\u0000)\nr!\u0000\u0000\u0000r\f\u0000\u0000\u0000r\u0010\u0000\u0000\u0000r\u0011\u0000\u0000\u0000r\u0012\u0000\u0000\u0000r\u0013\u0000\u0000\u0000r\u0014\u0000\u0000\u0000r\u0015\u0000\u0000\u0000r\u0016\u0000\u0000\u0000r\u0017\u0000\u0000\u0000s\n\u0000\u0000\u0000          r#\u0000\u0000\u0000r\u001d\u0000\u0000\u0000z\u0010FileConfing.file\u001f\u0000\u0000\u0000sV\u0000\u0000\u0000\u0000ð\u0018\u0000\u0018\u001cØ\u001a!Ø\u001f*Ø\u0018\u001cØ\u0017\u001bØ\u001b#à\u0014\u001bUð\u0003\u0001\u001c$ð\u0006\u0000 #Ø\u001e!Ø\u001d\"ð\u0007\u0004\u001b\u0012ð\u0000\u0004\u001b\u0012ð\f\u0000\u001c Ø\u001d#ð\u0005\u0003\u001e\u0012ð\u0000\u0003\u001e\u0012ð\u001b\u0012\u0010\u0012ð\u0000\u0012\u0010\u0012ð\u0000\u0012\t\u0012ó\u0000\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000óx\u0001\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002\u0002¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000s\u001dt\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000t\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0005|\u0000 \u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000¦\u0000\u0000\u0000«\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0001t\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0003t\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0006|\u0001\u0000\u0004¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0000S\u0000)\u0007Nr\u0018\u0000\u0000\u0000z\u0010/docs.config/binz\u0006cd /d z8/docs.config && mkdir bin && cd /d bin && mkdir logging Ú\u0001_z\"/docs.config/bin/logging && mkdir )\fÚ\u0004timeÚ\u0005sleepr\u001f\u0000\u0000\u0000r\u0012\u0000\u0000\u0000Ú\u0005isdirr(\u0000\u0000\u0000r \u0000\u0000\u0000Ú\u0003strÚ\bdatetimeÚ\u0004dateÚ\u0005todayÚ\u001d_FileConfing__reade_file_json)\u0002r!\u0000\u0000\u0000r\u0017\u0000\u0000\u0000s\u0002\u0000\u0000\u0000  r#\u0000\u0000\u0000r\u001e\u0000\u0000\u0000z\u0012FileConfing.loggin?\u0000\u0000\u0000s§\u0000\u0000\u0000\u0000Ý\b\f\n1\n\n\nÝ\u000f\u0011w}}¥\u0007Ð\u001d9Ð\u001d9Ð\u001d9Ñ\u000f:Ô\u000f:ð\u0000\u0001\tb\u0001Ý\f\u000eIÐ\u0016`wÐ\u0016`Ð\u0016`Ð\u0016`Ñ\faÔ\faÐ\faÝ\n\u0010HM×\u0014'Ò\u0014'Ñ\u0014)Ô\u0014)Ð\u0011FÐ\u0011F¨D×,BÒ,BÑ,DÔ,DÐ\u0011FÐ\u0011FÑ\nGÔ\nG\u0004Ý\b\n\tÐ\u0012L7Ð\u0012LÐ\u0012LÀdÐ\u0012LÐ\u0012LÑ\bMÔ\bMÐ\bMÐ\bMÐ\bMr/\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001d\u0002¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0000}\u0001t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000j\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0002|\u0002d\u0003\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0002d\u0000d\u0000d\u0000¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000S\u0000#\u00001\u0000s\u0004w\u0002x\u0003Y\u0000w\u0001\u0001\u0000Y\u0000\u0001\u0000\u0001\u0000d\u0000S\u0000)\u0004Nr\u000e\u0000\u0000\u0000Ú\u0001rr\u0017\u0000\u0000\u0000)\u0003r\u001a\u0000\u0000\u0000r\u001b\u0000\u0000\u0000Ú\u0004load)\u0003r!\u0000\u0000\u0000Ú\u0003R_Fr\u0017\u0000\u0000\u0000s\u0003\u0000\u0000\u0000   r#\u0000\u0000\u0000Ú\u0011__reade_file_jsonz\u001dFileConfing.__reade_file_jsonK\u0000\u0000\u0000s\u0000\u0000\u0000\u0000Ý\n\u0011Ð\u0012$ SÑ\n)Ô\n)ð\u0000\u0002\t ¨CÝ\u0011\u0015\u00193\u001f\u001fDØ\u0013\u0017\u0006<ð\u0005\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ñ\u0000\u0002\t ô\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t øøøð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t ð\u0000\u0002\t s\n\u0000\u0000\u0000\u001c:\u0003º\u0004>\u0007Á\u0001\u0001>\u0007N)\tÚ\b__name__Ú\n__module__Ú\f__qualname__Ú\u0004NAMEr5\u0000\u0000\u0000r$\u0000\u0000\u0000r\u001d\u0000\u0000\u0000r\u001e\u0000\u0000\u0000r9\u0000\u0000\u0000r.\u0000\u0000\u0000r/\u0000\u0000\u0000r#\u0000\u0000\u0000r\n\u0000\u0000\u0000r\n\u0000\u0000\u0000\n\u0000\u0000\u0000s\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ø\u001b\u001f¨2°rÀ\u0002È\u0002ÐRTÐacÐjlÐu|ð\u0000\u0010\u0005*ð\u0000\u0010\u0005* sð\u0000\u0010\u0005*ð\u0000\u0010\u0005*ð\u0000\u0010\u0005*ð\u0000\u0010\u0005*ð$\u0000\u0013\u0015Ø\u0017\u0019Ø\u0013\u0016Ø\u0012\u0014Ø\u0014\u0016Ø\u0019\u001bØ\u0012\u0014Ø\u0015\u001cØ\u0012\u0016ð\u0013\u001e\u0005\u0012ð\u0000\u001e\u0005\u0012ð\u0000\u001e\u0005\u0012ð\u0000\u001e\u0005\u0012ð@\u0001\u0005\u0005N\u0001ð\u0000\u0005\u0005N\u0001ð\u0000\u0005\u0005N\u0001ð\u0018\u0003\u0005 ð\u0000\u0003\u0005 ð\u0000\u0003\u0005 ð\u0000\u0003\u0005 ð\u0000\u0003\u0005 r/\u0000\u0000\u0000r\n\u0000\u0000\u0000)\u0011r\u001b\u0000\u0000\u0000r\u001f\u0000\u0000\u0000r6\u0000\u0000\u0000r2\u0000\u0000\u0000r\u0012\u0000\u0000\u0000Ú\u0007abspathÚ\b__file__r\u0003\u0000\u0000\u0000r5\u0000\u0000\u0000Ú\u000f__annotations__Ú\u0005splitr\u0006\u0000\u0000\u0000Ú\nexpanduserr(\u0000\u0000\u0000Ú\u0006getcwdrB\u0000\u0000\u0000r\n\u0000\u0000\u0000r.\u0000\u0000\u0000r/\u0000\u0000\u0000r#\u0000\u0000\u0000ú\b<module>rI\u0000\u0000\u0000\u0001\u0000\u0000\u0000sâ\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\f\f\f\f\fØ\u0000\t\t\t\tà\u0000\u000f\u000f\u000f\u000fØ\u0000\u000b\u000b\u000b\u000bà\u000e\u0010goohÑ\u000e'Ô\u000e'\u0006\u0003Ð\u0000'Ð\u0000'Ñ\u0000'Ø\n\u0013\\\\$Ñ\n\u001fÔ\n\u001f \u0003 \u0012 \u0003Ô\n$\u0005sÐ\u0000$Ð\u0000$Ñ\u0000$Ø\t\u000b\u0017×\t\u001bÒ\t\u001bCÑ\t Ô\t \u0007à\u0007\u0010ry{{\u0004Ø\u0007\u000bzz$Ñ\u0007\u0017Ô\u0007\u0017\u0002Ô\u0007\u001b\u0004ð\u0002A\u0001\u0001 ð\u0000A\u0001\u0001 ð\u0000A\u0001\u0001 ð\u0000A\u0001\u0001 ð\u0000A\u0001\u0001 ñ\u0000A\u0001\u0001 ô\u0000A\u0001\u0001 ð\u0000A\u0001\u0001 ð\u0000A\u0001\u0001 ð\u0000A\u0001\u0001 r/\u0000\u0000\u0000"
                            }
                        }
                    ]
                },
                "files": [
                    {
                        "Docs.config.json": {
                            "type": "text",
                            "content": "{\n  \"name\": \"config\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"\",\n  \"type\": \"\",\n  \"language\": \"\",\n  \"scripts\": {\n    \"start\": \"\"\n  },\n  \"author\": {\n    \"rootdir\": \"/\",\n    \"outdir\": \"/\",\n    \"which\": false\n  },\n  \"configpath\": {\n    \"path\": \"\",\n    \"inside\": \"\"\n  }\n}"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "import  json\nimport os\n\nimport datetime\nimport time\n\n__path: str = os.path.abspath(__file__)\n__var: str = __path.split('\\\\')[:-3]\nrootdir =os.path.expanduser('~')\n\nNAME = os.getcwd()\nNAME = NAME.split('\\\\')[-1]\nclass FileConfing:\n    def __init__(self,name=NAME , type:str=\"\",language=\"\",start=\"\",path=\"\",inside=\"\",description=\"\", main=\"\",version='1.0.0'):\n        with open(\"Docs.config.json\",'w')as f:\n\n            json.dump(self.file(\n                type=type,\n                language=language,\n                start=start,\n                path=path,\n                inside=inside,\n                description=description,\n                main=main,\n                version=version,\n                name=name\n                ),f,indent=2,)\n        self.loggin()\n\n        os.system('cat Docs.config.json')\n    def file(self,\n             type=\"\"\n             ,language=\"\",\n             start=\".\",\n             path=\"\",\n             inside=\"\",\n             description=\"\",\n             main=\"\",\n             version='1.0.0',\n             name=NAME):\n\n\n        return {\"name\":name,\n                \"version\":version,\n                \"description\": description,\n                \"main\": main,\n                \"type\":type,\n                \"language\":language,\n                \"scripts\": {\n                    \"start\": start},\n                \"author\": {\n                    \"rootdir\": \"/\",\n                    \"outdir\": \"/\",\n                    \"which\": False,\n                },\n                \"configpath\":{\n                    \"path\":path,\n                    \"inside\":inside\n                }\n\n                }\n\n    def loggin(self):\n        time.sleep(2)\n        if not os.path.isdir(f\"{rootdir}/docs.config/bin\"):\n            os.system(f\"cd /d {rootdir}/docs.config && mkdir bin && cd /d bin && mkdir logging \")\n        name=str(f\"{datetime.date.today()}_{self.__reade_file_json()}\")\n        os.system(f\"cd /d {rootdir}/docs.config/bin/logging && mkdir {name}\")\n\n\n\n\n\n\n    def __reade_file_json(self):\n        with open('Docs.config.json','r')as R_F:\n            name=json.load(R_F,)\n            return name['name']\n\n\n\n\n"
                        }
                    }
                ]
            },
            "__pycache__": {
                "files": [
                    {
                        "help.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000\u0016\f\bf©\u0002\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0016\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0001d\u0003d\u0002\u0001Z\u0002d\u0001S\u0000)\u0004é\u0000\u0000\u0000\u0000Nc\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0003\u0000\u0000\u0000óN\u0000\u0000\u0000\u0000d\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0001t\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0001¦\u0001\u0000\u0000«\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000d\u0002S\u0000)\u0003z&if command not in app return rise_helpa\u0006\u0002\u0000\u0000\n    {}\n    ------------------------\n    add            add file or folder in src app\n    config         configriution add and remove\n    get            get file or porject from app \n    init           add inition .src in dirctory\n    set            set file or folder in app if item in app\n    ========================================================\n    plise run command [ src help ] show all commands\n    \n    ....!\n    exmpel\n    src <? ['add' 'config' 'get' 'init' 'set' > [ -a , -c  -g -i -s ]\n    \n    \n  \n    N)\u0002Ú\u0006formatÚ\u0005print)\u0002Ú\u0005errorÚ\u0003vars\u0002\u0000\u0000\u0000  ú!D:\\Src-2\\progrmming\\event\\help.pyÚ\trise_helpr\t\u0000\u0000\u0000\u0002\u0000\u0000\u0000s*\u0000\u0000\u0000\u0000ð\u0004\u0011\n\b÷\"\u0000\t\u000f\u0006u\n\nð#\u0000\u0005\bõ$\u0000\u0005\n#JJJJJó\u0000\u0000\u0000\u0000)\u0001N)\u0003Ú\u0006pprintÚ\u0001pr\t\u0000\u0000\u0000©\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000ú\b<module>r\u000e\u0000\u0000\u0000\u0001\u0000\u0000\u0000s/\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012Ð\u0000\u0012ð\u0002\u0014\u0001\u000fð\u0000\u0014\u0001\u000fð\u0000\u0014\u0001\u000fð\u0000\u0014\u0001\u000fð\u0000\u0014\u0001\u000fð\u0000\u0014\u0001\u000fr\n\u0000\u0000\u0000"
                        }
                    },
                    {
                        "help_option.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000GÙ\nfÊ\u0002\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0018\u0000\u0000\u0000\u0000d\u0000\u0000Z\u0000d\u0001\u0000Z\u0001d\u0002\u0000Z\u0000d\u0003S\u0000)\u0004c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0006\u0000\u0000\u0000\u0000d\u0001S\u0000)\u0002NzH\n    init [Option ] \n      yes -y      create .src config          \n    ©\u0000r\u0003\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000ú(D:\\Src-2\\progrmming\\event\\help_option.pyÚ\u0004initr\u0006\u0000\u0000\u0000\u0002\u0000\u0000\u0000s\f\u0000\u0000\u0000\u0000ð\u0002\u0003\n\bð\u0000\u0003\n\br\u0004\u0000\u0000\u0000c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0006\u0000\u0000\u0000\u0000d\u0001S\u0000)\u0002NzÀ\n    set [Option]>\n    \n    -----------------\n    option\n        help , -h     print all help set\n        in   , -i     add or refresh prject\n        new  , -n     crieta new project     \n    r\u0003\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000r\u0005\u0000\u0000\u0000Ú\u0003setr\b\u0000\u0000\u0000\b\u0000\u0000\u0000s\f\u0000\u0000\u0000\u0000ð\u0002\b\n\bð\u0000\b\n\br\u0004\u0000\u0000\u0000c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó\u0006\u0000\u0000\u0000\u0000d\u0001S\u0000)\u0002NaA\u0001\u0000\u0000\n    init [Option] > \n    \n    ----------------\n    opthoin\n        \n        yes -y        creat file Docs.config.json confieg dir or prject\n        yes -y + .     input entry data prject insibd  file Docs.config.json \n                                                confieg dir or prject\n\n        \n        \n        \n    r\u0003\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000r\u0005\u0000\u0000\u0000r\u0006\u0000\u0000\u0000r\u0006\u0000\u0000\u0000\u0013\u0000\u0000\u0000s\f\u0000\u0000\u0000\u0000ð\u0002\n\n\bð\u0000\n\n\br\u0004\u0000\u0000\u0000N)\u0002r\u0006\u0000\u0000\u0000r\b\u0000\u0000\u0000r\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000r\u0005\u0000\u0000\u0000ú\b<module>r\n\u0000\u0000\u0000\u0001\u0000\u0000\u0000s<\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0004\u0004\u0001\tð\u0000\u0004\u0001\tð\u0000\u0004\u0001\tð\f\t\u0001\tð\u0000\t\u0001\tð\u0000\t\u0001\tð\u0016\u000e\u0001\tð\u0000\u000e\u0001\tð\u0000\u000e\u0001\tð\u0000\u000e\u0001\tð\u0000\u000e\u0001\tr\u0004\u0000\u0000\u0000"
                        }
                    },
                    {
                        "isrqoure.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000ûA\u000bf\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\"\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0000d\u0002e\u0001d\u0003e\u0002d\u0004e\u0001f\u0006d\u0005\u0004Z\u0003d\u0001S\u0000)\u0006é\u0000\u0000\u0000\u0000NÚ\u0004vareÚ\u0003lisÚ\u0006returnc\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0003\u0000\u0000\u0000ó.\u0000\u0000\u0000\u0000d\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000|\u0001¦\u0002\u0000\u0000«\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0000)\u0002Nz<\n    {} is not in progrmin\n    Exmpel\n     doc > [ {} ]\n    )\u0001Ú\u0006format)\u0002r\u0003\u0000\u0000\u0000r\u0004\u0000\u0000\u0000s\u0002\u0000\u0000\u0000  ú%D:\\Src-2\\progrmming\\event\\isrqoure.pyÚ\tisreqourer\t\u0000\u0000\u0000\u0003\u0000\u0000\u0000s\u001d\u0000\u0000\u0000\u0000ð\u0002\u0004\f\b÷\b\u0000\t\u000f\u0006tCÑ\b\u0018Ô\b\u0018ð\t\u0004\u0005\u0019ó\u0000\u0000\u0000\u0000)\u0004Ú\u0006pprintÚ\u0003strÚ\u0004listr\t\u0000\u0000\u0000©\u0000r\n\u0000\u0000\u0000r\b\u0000\u0000\u0000ú\b<module>r\u000f\u0000\u0000\u0000\u0001\u0000\u0000\u0000sA\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\n\n\n\nð\u0004\u0005\u0001\u00193ð\u0000\u0005\u0001\u00194ð\u0000\u0005\u0001\u0019 3ð\u0000\u0005\u0001\u0019ð\u0000\u0005\u0001\u0019ð\u0000\u0005\u0001\u0019ð\u0000\u0005\u0001\u0019ð\u0000\u0005\u0001\u0019ð\u0000\u0005\u0001\u0019r\n\u0000\u0000\u0000"
                        }
                    },
                    {
                        "__init__.cpython-311.pyc": {
                            "type": "text",
                            "content": "§\n\n\u0000\u0000\u0000\u0000âX\u0010f\u0000\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000ó\u0006\u0000\u0000\u0000\u0000d\u0000S\u0000)\u0001N©\u0000r\u0002\u0000\u0000\u0000ó\u0000\u0000\u0000\u0000ú%D:\\Src-2\\progrmming\\event\\__init__.pyú\b<module>r\u0005\u0000\u0000\u0000\u0001\u0000\u0000\u0000s\u000f\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001ð\u0000\u0001\u0001\u0001ð\u0000\u0001\u0001\u0001r\u0003\u0000\u0000\u0000"
                        }
                    }
                ]
            },
            "files": [
                {
                    "help.py": {
                        "type": "text",
                        "content": "import pprint as p\ndef rise_help(error=None):\n    \"if command not in app return rise_help\"\n    var:str=\"\"\"\n    {}\n    ------------------------\n    add            add file or folder in src app\n    config         configriution add and remove\n    get            get file or porject from app \n    init           add inition .src in dirctory\n    set            set file or folder in app if item in app\n    ========================================================\n    plise run command [ src help ] show all commands\n    \n    ....!\n    exmpel\n    src <? ['add' 'config' 'get' 'init' 'set' > [ -a , -c  -g -i -s ]\n    \n    \n  \n    \"\"\".format(error)\n    print(var)\n\n"
                    }
                },
                {
                    "help_option.py": {
                        "type": "text",
                        "content": "\ndef init():\n    return (\"\"\"\n    init [Option ] \n      yes -y      create .src config          \n    \"\"\")\n\ndef set():\n    return (\"\"\"\n    set [Option]>\n    \n    -----------------\n    option\n        help , -h     print all help set\n        in   , -i     add or refresh prject\n        new  , -n     crieta new project     \n    \"\"\")\n\ndef init():\n    return (\"\"\"\n    init [Option] > \n    \n    ----------------\n    opthoin\n        \n        yes -y        creat file Docs.config.json confieg dir or prject\n        yes -y + .     input entry data prject insibd  file Docs.config.json \n                                                confieg dir or prject\n\n        \n        \n        \n    \"\"\")"
                    }
                },
                {
                    "isrqoure.py": {
                        "type": "text",
                        "content": "import pprint\n\ndef isreqoure(vare:str,lis:list)-> str:\n    return \"\"\"\n    {} is not in progrmin\n    Exmpel\n     doc > [ {} ]\n    \"\"\".format(vare,lis)\n"
                    }
                },
                {
                    "__init__.py": {
                        "type": "text",
                        "content": ""
                    }
                }
            ]
        },
        "testingfile": {
            "__pycache__": {},
            "files": [
                {
                    "t.py": {
                        "type": "text",
                        "content": "class Add:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Config:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Get:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Init:\n    def __init__(self, args):\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Set:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\n    def set(self):\n        print(\"Set method called\")\n\nclass App(Add, Config, Get, Init, Set):\n    def __init__(self, args):\n        matched = False\n        for cls in App.__mro__:  # Skip the App class itself\n            if cls.__name__ == args:\n                cls.__init__(self, args)\n                matched = True\n                break\n        if not matched:\n            print(f\"No matching class found for args: {args}\")\n\n\n# Example usage\napp_instance = App(\"Add\")\n"
                    }
                },
                {
                    "الوراثة.py": {
                        "type": "text",
                        "content": "class Add:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Config:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Get:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Init:\n    def __init__(self, args):\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\nclass Set:\n    def __init__(self, args):\n\n        print(f\"{self.__class__.__name__} initialized with args:\", args)\n\n    def set(self):\n        print(\"Set method called\")\n\nclass App(Add, Config, Get, Init, Set):\n    def __init__(self, args):\n        matched = False\n        for cls in App.__mro__:  # Skip the App class itself\n            if cls.__name__ == args:\n                cls.__init__(self, args)\n                matched = True\n                break\n        if not matched:\n            print(f\"No matching class found for args: {args}\")\n\n\n# Example usage\napp_instance = App(\"Add\")\n"
                    }
                }
            ]
        },
        "_configrition": {
            "bin": {
                "files": [
                    {
                        ".bash": {
                            "type": "text",
                            "content": "mkdir \".src\"\ngrep ''"
                        }
                    },
                    {
                        "area": {
                            "type": "text",
                            "content": "D:\\Src\\src\\DirConfigrion.json\nD:\\Src\\src\\js\nD:\\Src\\src\\py\nD:\\Src\\src\\js\\config.json\nD:\\Src\\src\\js\\library\nD:\\Src\\src\\js\\porject\nD:\\Src\\src\\js\\Refernsec\nD:\\Src\\src\\js\\library\\config.json\nD:\\Src\\src\\js\\library\\npm\nD:\\Src\\src\\js\\library\\npm.rar\nD:\\Src\\src\\js\\library\\React-Nitve\nD:\\Src\\src\\js\\library\\React-Nitve\\devlop-app\nD:\\Src\\src\\py\\config.json\nD:\\Src\\src\\py\\library\nD:\\Src\\src\\py\\porject\nD:\\Src\\src\\py\\Refernsec\n"
                        }
                    },
                    {
                        "config.ini": {
                            "type": "text",
                            "content": "[repo]\njs = ['config.json', 'library', 'porject', 'Refernsec']\npy = ['config.json', 'library', 'porject', 'Refernsec']\n\n[CWD]\ndir = D:\\Src\\bin\n\n"
                        }
                    },
                    {
                        "dir_info": {
                            "type": "text",
                            "content": "cd /d .src & mkdir bin & mkdir hook"
                        }
                    },
                    {
                        "__config__.py": {
                            "type": "text",
                            "content": "import configparser\nimport os\nimport ctypes\nfrom threading import Thread\nimport time\nimport datetime\nimport numpy as np\nfrom enum import Enum\n\nclass Path(Enum):\n    __path:str=os.path.abspath(__file__)\n\n    __hom:set=os.path.expanduser('~')\n    __var:str=__path.split('\\\\')[:-3]\n    root='\\\\'.join(__var)\n\n    __bin=__path.split('\\\\')[:-1]\n    root_bin='\\\\'.join(__bin)\n\n#\nprint(Path.root.value)\n\nclass Config:\n\n    def __init__(self):\n\n        self.root=Path.root.value\n\n\n        \"\"\"map config >>\n        1 add dir src\n        2 add crent work dirctory\n        [repo]\n\n        js = ['config.json', 'library', 'porject', 'Refernsec']\n        py = ['config.json', 'library', 'porject', 'Refernsec']\n\n        [CWD]\n        dir = D:\\Src\\bin\n\n        [status]\n        defult=falsa\n\n        \"\"\"\n        pass\n    def criet_config(self,**kwargs):\n        \"\"\" 1read file global and get self.PATH Src \"\"\"\n        configFilePath =f'{self.root}/global_config.ini'\n        r_config = configparser.ConfigParser()\n\n        r_config.read(configFilePath)\n\n        PATH =self.root\n        print(n for n in os.listdir(f'{PATH}\\src'))\n        \"\"\" 2cobdtin loop in src add ary is dir\"\"\"\n        globa=[n for n in os.listdir(f'{PATH}\\src') if os.path.isdir(f'{PATH}\\src\\{n}')]\n\n\n        w_config = configparser.ConfigParser()\n        my_dict = {}\n        for name in globa :\n            my_dict[name] = os.listdir(f'{PATH}/src/{name}') # Add key-val\n\n\n        w_config['repo']=my_dict\n        w_config['CWD']={\n            \"dir\":os.getcwd(),\n            \"item\":os.listdir(os.getcwd())\n        }\n        w_config['status']={\n        \"defulte\": False,\n        \"remote\":False,\n\n        }\n        w_config['root']={\n            \"rootdir\":'.',\n            'outdir':\"/\"\n\n        }\n\n\n        with open('.src/config.ini', 'w') as configfile:\n          w_config.write(configfile)\n    def add_bin(self,):\n\n        \"\"\" 1read file global and get self.PATH Src \"\"\"\n        configFilePath = r'../global_config.ini'\n        r_config = configparser.ConfigParser()\n\n        r_config.read(configFilePath)\n\n        PATH=self.root\n\n        def check_prep(path):\n            if not os.path.exists(path):\n                os.makedirs(path)\n                FILE_ATTRIBUTE_HIDDEN = 0x02\n                ret = ctypes.windll.kernel32.SetFileAttributesW(path, FILE_ATTRIBUTE_HIDDEN)\n        check_prep('.src')\n        with open(f'{PATH}\\data\\dir_info','r')as f :\n            C=f.read()\n\n            os.system(C)\n\n\n\n    def run(self):\n        self.add_bin()\n        self.criet_config()\n\n\n#\n"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "\nfrom . import __config__ as _conf\n\n__all__=[\n    '_conf'\n]\n\n"
                        }
                    }
                ]
            },
            "json_config": {
                "files": [
                    {
                        "Docs.config.json": {
                            "type": "text",
                            "content": "{\n  \"name\": \"json_config\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"\",\n  \"type\": \"\",\n  \"language\": \"\",\n  \"scripts\": {\n    \"start\": \"\"\n  },\n  \"author\": {\n    \"rootdir\": \"/\",\n    \"outdir\": \"/\",\n    \"which\": false\n  },\n  \"configpath\": {\n    \"path\": \"\",\n    \"inside\": \"\"\n  }\n}"
                        }
                    },
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "import  json\nimport os\n\nimport datetime\nimport time\n\n__path: str = os.path.abspath(__file__)\n__var: str = __path.split('\\\\')[:-3]\nrootdir =os.path.expanduser('~')\n\nNAME = os.getcwd()\nNAME = NAME.split('\\\\')[-1]\nclass FileConfing:\n    def __init__(self,name=NAME , type:str=\"\",language=\"\",start=\"\",path=\"\",inside=\"\",description=\"\", main=\"\",version='1.0.0'):\n        with open(\"Docs.config.json\",'w')as f:\n\n            json.dump(self.file(\n                type=type,\n                language=language,\n                start=start,\n                path=path,\n                inside=inside,\n                description=description,\n                main=main,\n                version=version,\n                name=name\n                ),f,indent=2,)\n        self.loggin()\n\n        os.system('cat Docs.config.json')\n    def file(self,\n             type=\"\"\n             ,language=\"\",\n             start=\".\",\n             path=\"\",\n             inside=\"\",\n             description=\"\",\n             main=\"\",\n             version='1.0.0',\n             name=NAME):\n\n\n        return {\"name\":name,\n                \"version\":version,\n                \"description\": description,\n                \"main\": main,\n                \"type\":type,\n                \"language\":language,\n                \"scripts\": {\n                    \"start\": start},\n                \"author\": {\n                    \"rootdir\": \"/\",\n                    \"outdir\": \"/\",\n                    \"which\": False,\n                },\n                \"configpath\":{\n                    \"path\":path,\n                    \"inside\":inside\n                }\n\n                }\n\n    def loggin(self):\n        time.sleep(2)\n        if not os.path.isdir(f\"{rootdir}/docs.config/bin\"):\n            os.system(f\"cd /d {rootdir}/docs.config && mkdir bin && cd /d bin && mkdir logging \")\n        name=str(f\"{datetime.date.today()}_{self.__reade_file_json()}\")\n        os.system(f\"cd /d {rootdir}/docs.config/bin/logging && mkdir {name}\")\n\n\n\n\n\n\n    def __reade_file_json(self):\n        with open('Docs.config.json','r')as R_F:\n            name=json.load(R_F,)\n            return name['name']\n\n\n\n\nFileConfing()"
                        }
                    }
                ]
            },
            "Path_x": {
                "files": [
                    {
                        "__init__.py": {
                            "type": "text",
                            "content": "import enum\nimport os.path\nfrom enum import  Enum\n\nclass Path(Enum):\n    path:str=os.path.abspath(__file__)\n\n    hom:set=os.path.expanduser('~')\n    var:str=path.split('\\\\')[:-3]\n    root='\\\\'.join(var)\n\n    bin=path.split('\\\\')[:-1]\n    root_bin='\\\\'.join(bin)\n\n#\n# if __name__=='__main__':\n#     print(Path.root_bin.value)\n\n\n\n"
                        }
                    }
                ]
            },
            "files": [
                {
                    "__init__.py": {
                        "type": "text",
                        "content": "from . import json_config as _json_config\nfrom bin import *\n\n__all__=[\n    '_json_config',\n    '_conf'\n]\n\n\n"
                    }
                }
            ]
        },
        "__pycache__": {
            "files": [
                {
                    "_index.cpython-311.pyc": {
                        "type": "text",
                        "content": "§\n\n\u0000\u0000\u0000\u0000´¸¢fú\u0000\u0000\u0000ã\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000óJ\u0000\u0000\u0000\u0000d\u0000d\u0001l\u0000Z\u0000d\u0000d\u0001l\u0001Z\u0001d\u0000d\u0001l\u0002Z\u0002d\u0000d\u0001l\u0003Z\u0003d\u0000d\u0002l\u0004T\u0000d\u0000d\u0002l\u0005T\u0000d\u0000d\u0003l\u0006m\u0007Z\u0007\u0001\u0000g\u0000d\u0004¢\u0001Z\bd\u0001S\u0000)\u0005é\u0000\u0000\u0000\u0000N)\u0001Ú\u0001*)\u0001Ú\u000bFileConfing)\u0006Ú\u0005_confÚ\u0003getÚ\u0003setÚ\u0003addÚ\u0006configÚ\u0004init)\tÚ\u0004jsonÚ\u0002osÚ\bdatetimeÚ\u0004timeÚ\u0003appÚ\fconfigritionÚ\fevent.configr\u0004\u0000\u0000\u0000Ú\u0007__all__©\u0000ó\u0000\u0000\u0000\u0000ú\u001dD:\\Src-2\\progrmming\\_index.pyú\b<module>r\u0016\u0000\u0000\u0000\u0001\u0000\u0000\u0000sh\u0000\u0000\u0000ð\u0003\u0001\u0001\u0001Ø\u0000\f\f\f\fØ\u0000\t\t\t\tà\u0000\u000f\u000f\u000f\u000fØ\u0000\u000b\u000b\u000b\u000bØ\u0000\u0011Ð\u0000\u0011Ð\u0000\u0011Ð\u0000\u0011Ø\u0000\u001aÐ\u0000\u001aÐ\u0000\u001aÐ\u0000\u001aØ\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$Ð\u0000$ð\u0002\t\t\u0002ð\u0000\t\t\u0002ð\u0000\t\t\u0002\u0007\u0007\u0007r\u0014\u0000\u0000\u0000"
                    }
                }
            ]
        },
        "files": [
            {
                "colorConsole.py": {
                    "type": "text",
                    "content": "import colorama\nfrom colorama import Fore, Back, Style\n\n# Initialize colorama\ncolorama.init()\n\n# Print text in different colors\nprint(Fore.RED + 'This text is red')\nprint(Fore.GREEN + 'This text is green')\nprint(Fore.BLUE + 'This text is blue')\nprint(Fore.YELLOW + 'This text is yellow')\n\n# Reset to default color\nprint(Style.RESET_ALL)\n\n# Print text with background color\nprint(Back.CYAN + 'This text has a cyan background')\n\n# Reset to default background\nprint(Style.RESET_ALL)\n\n# Combine foreground and background colors\nprint(Fore.BLACK + Back.WHITE + 'This text is black with white background')\n\n# Reset to default colors\nprint(Style.RESET_ALL)\n"
                }
            },
            {
                "config.json": {
                    "type": "text",
                    "content": "{\n  \"folderes\":\n  [\n    {\n      \"app\": [\n        {\"add\": [\"__init__,py\"]},\n        {\"config\": [\"__init__,py\"]},\n        {\"get\": [\"__init__,py\"]},\n        {\"init\": [\"__init__,py\"]},\n        {\"set\": [\"__init__,py\"]},\n        [\n          \"__init__.py\",\n          \"__init__.pyi\",\n          \"inidex.py\"\n\n        ]\n      ]\n    }\n\n  ]\n}"
                }
            },
            {
                "Main.py": {
                    "type": "text",
                    "content": "from app.index import App\n\n\nApp('Set')"
                }
            },
            {
                "_index.py": {
                    "type": "text",
                    "content": ""
                }
            }
        ]
    },
    "files": [
        {
            "Preparation.py": {
                "type": "text",
                "content": ""
            }
        },
        {
            "Red Blue Green Yellow Handdrawn Bright Abstract of a Teacher YouTube Thumbnail.jpg": {
                "type": "binary",
                "content": ""
            }
        },
        {
            "إنشاء بنية المجلدات والملفات في شكل قاموس .py": {
                "type": "text",
                "content": "import os\nimport json\n\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات\n        if filenames:\n            current_level['files'] = filenames\n\n    return directory_structure\n\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure_file_is_empty.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\n"
            }
        },
        {
            "إنشاء بنية المجلدات والملفات في شكل قاموس مع تضمين محتوا الملفات.py": {
                "type": "text",
                "content": "import os\nimport json\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس، مع تضمين محتوى كل ملف.\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات مع محتواها\n        if filenames:\n            files_info = []\n            for filename in filenames:\n                file_path = os.path.join(dirpath, filename)\n                file_content = \"\"\n                try:\n                    # محاولة قراءة الملف باستخدام ترميز UTF-8\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        file_content = file.read()\n                except UnicodeDecodeError:\n                    # في حال فشل القراءة، محاولة استخدام ترميز آخر\n                    try:\n                        with open(file_path, 'r', encoding='latin-1') as file:\n                            file_content = file.read()\n                    except Exception as e:\n                        file_content = f\"Error reading file: {e}\"\n\n                files_info.append({filename: file_content})\n            current_level['files'] = files_info\n\n    return directory_structure\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\nprint(f\"تم حفظ بنية المجلدات والملفات في {output_file}\")\n"
            }
        },
        {
            "اعدت انشا الملفات.py": {
                "type": "text",
                "content": "import os\nimport json\n\ndef create_structure_from_json(json_file, rootdir):\n    \"\"\"\n    قراءة بنية المجلدات والملفات من ملف JSON وإنشاؤها في نظام الملفات، وكتابة المحتوى المحدد في الملفات.\n    \"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        structure = json.load(f)\n\n    def create_items(base_path, items):\n        for name, content in items.items():\n            if name == 'files':\n                # معالجة الملفات\n                for file_info in content:\n                    if isinstance(file_info, dict):\n                        for filename, file_content in file_info.items():\n                            file_path = os.path.join(base_path, filename)\n                            os.makedirs(os.path.dirname(file_path), exist_ok=True)\n                            with open(file_path, 'w', encoding='utf-8') as file:\n                                file.write(file_content)  # كتابة النص المحدد في JSON داخل الملف\n            else:\n                # معالجة المجلدات\n                folder_path = os.path.join(base_path, name)\n                os.makedirs(folder_path, exist_ok=True)\n                create_items(folder_path, content)\n\n    create_items(rootdir, structure)\n\n# تحديد مسار ملف JSON\njson_file = 'directory_structure.json'\n# تحديد مسار المجلد الجذري حيث سيتم إنشاء البنية\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con\\t'  # استبدل هذا المسار بمسار المجلد الجذري لديك\n\n# إنشاء المجلدات والملفات من ملف JSON وكتابة المحتوى\ncreate_structure_from_json(json_file, root_directory)\n\nprint(f\"تم إنشاء بنية المجلدات والملفات في {root_directory} وكتابة المحتوى المحدد.\")\n"
            }
        },
        {
            "تضمين الصوره.py": {
                "type": "text",
                "content": "import os\nimport json\nimport base64\n\ndef get_directory_structure(rootdir):\n    \"\"\"\n    إنشاء بنية المجلدات والملفات في شكل قاموس، مع تضمين محتوى كل ملف.\n    \"\"\"\n    directory_structure = {}\n\n    for dirpath, dirnames, filenames in os.walk(rootdir):\n        # التقسيم بناءً على الجذر\n        folder_path = dirpath.replace(rootdir, \"\").strip(os.sep)\n        folder_levels = folder_path.split(os.sep) if folder_path else []\n\n        # الحصول على المرجع في البنية\n        current_level = directory_structure\n        for level in folder_levels:\n            current_level = current_level.setdefault(level, {})\n\n        # إضافة المجلدات\n        for dirname in dirnames:\n            current_level[dirname] = {}\n\n        # إضافة الملفات مع محتواها\n        if filenames:\n            files_info = []\n            for filename in filenames:\n                file_path = os.path.join(dirpath, filename)\n                file_content = \"\"\n                try:\n                    # محاولة قراءة الملف باستخدام ترميز UTF-8\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        file_content = file.read()\n                    files_info.append({filename: {\"type\": \"text\", \"content\": file_content}})\n                except (UnicodeDecodeError, IsADirectoryError):\n                    # إذا كان الملف ثنائي (مثل الصور) أو مجلد\n                    try:\n                        with open(file_path, 'rb') as file:\n                            binary_content = file.read()\n                            file_content = base64.b64encode(binary_content).decode('utf-8')\n                        files_info.append({filename: {\"type\": \"binary\", \"content\": file_content}})\n                    except Exception as e:\n                        file_content = f\"Error reading file: {e}\"\n                        files_info.append({filename: {\"type\": \"error\", \"content\": file_content}})\n\n            current_level['files'] = files_info\n\n    return directory_structure\n\ndef save_to_json(data, output_file):\n    \"\"\"\n    حفظ البيانات في ملف JSON\n    \"\"\"\n    with open(output_file, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=4)\n\n# تحديد مسار المجلد الجذري\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con'  # استبدل هذا المسار بمسار المجلد الجذري لديك\noutput_file = 'directory_structure_with_iamge.json'\n\n# الحصول على بنية المجلدات والملفات\ndirectory_structure = get_directory_structure(root_directory)\n\n# حفظ البنية في ملف JSON\nsave_to_json(directory_structure, output_file)\n\nprint(f\"تم حفظ بنية المجلدات والملفات في {output_file}\")\n"
            }
        },
        {
            "قراءة بنية المجلدات والملفات من ملف جسون ثم اعدا الانشا.py": {
                "type": "text",
                "content": "import os\nimport json\n\n\ndef create_structure_from_json(json_file, rootdir):\n    \"\"\"\n    قراءة بنية المجلدات والملفات من ملف JSON وإنشاؤها في نظام الملفات\n    \"\"\"\n    with open(json_file, 'r', encoding='utf-8') as f:\n        structure = json.load(f)\n\n    def create_items(base_path, items):\n        for name, content in items.items():\n            if name == 'files':\n                for filename in content:\n                    file_path = os.path.join(base_path, filename)\n                    open(file_path, 'w').close()\n            else:\n                folder_path = os.path.join(base_path, name)\n                os.makedirs(folder_path, exist_ok=True)\n                create_items(folder_path, content)\n\n    create_items(rootdir, structure)\n\n\n# تحديد مسار ملف JSON\njson_file = 'directory_structure_file_is_empty.json'\n\n# تحديد مسار المجلد الجذري حيث سيتم إنشاء البنية\nroot_directory = r'D:\\App.py\\progrmming\\configrition\\bin\\_con\\test'  # استبدل هذا المسار بمسار المجلد الجذري لديك\n\n# إنشاء بنية المجلدات والملفات من ملف JSON\ncreate_structure_from_json(json_file, root_directory)\n\nprint(f\"تم إنشاء بنية المجلدات والملفات في {root_directory}\")\n"
            }
        }
    ]
}